/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

//DataModel
(function(jsh){
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var XValidate = jsh.XValidate;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xdatamodel = xmodel.datamodel = function(){
    this._is_insert = true;
    this._modelid = modelid;
    <% _.each(model.fields,function(field){ if(!field.name) return; %>this.<%=field.name%> = '';<%});%>
    XExt.XModel.ApplyDefaults(this);
  }

  xdatamodel.prototype.Fields = {
    <% _.each(model.fields,function(field){ if(!('actions' in field)) return; if(('unbound' in field) && field.unbound) return; if(field.control=='subform') return; if(field.control=='html') return; if(field.control=='button') return;  if(!field.name) return; if(!field.control) return; %>
      "<%=field.name%>":{"name":"<%=field.name%>",
      <%-xejs.iif('format' in field,'"format":'+JSON.stringify(field.format)+',') %>
      <%-xejs.iif('actions' in field,'"actions":'+JSON.stringify(field.actions)+',') %>
      <%-xejs.iif('readonly' in field,'"readonly":'+JSON.stringify(field.readonly)+',') %>
      <%-xejs.iif('control' in field,'"control":'+JSON.stringify(field.control)+',') %>
      <%-xejs.iif('virtual' in field,'"virtual":'+JSON.stringify(field.virtual)+',') %>
      <%-xejs.iif('always_editable_on_insert' in field,'"always_editable_on_insert":'+JSON.stringify(field.always_editable_on_insert)+',') %>
      <%-xejs.iif('onchange' in field,'"onchange":'+JSON.stringify('(function(){'+jslocals+field.onchange+'}).call(this,obj,newval,e)')+',') %>
      <%-xejs.iif('static' in field,'"static":'+JSON.stringify(field.static)+',') %>
      <%-xejs.iif('key' in field,'"key":'+JSON.stringify(field.key)+',') %>
      <%-xejs.iif('lovkey' in field,'"lovkey":'+JSON.stringify(field.lovkey)+',') %>
      <%-xejs.iif('value' in field,'"value":'+JSON.stringify(field.value)+',') %>
      <% if('controlparams' in field){ %>controlparams:{
        <%-xejs.iif('thumbnail_width' in field.controlparams,'"thumbnail_width":'+JSON.stringify(field.controlparams.thumbnail_width)+',') %>
        <%-xejs.iif('expand_all' in field.controlparams,'"expand_all":'+JSON.stringify(field.controlparams.expand_all)+',') %>
        <%-xejs.iif('expand_to_selected' in field.controlparams,'"expand_to_selected":'+JSON.stringify(field.controlparams.expand_to_selected)+',') %>
        <%-xejs.iif('value_true' in field.controlparams,'"value_true":'+JSON.stringify(field.controlparams.value_true)+',') %>
        <%-xejs.iif('value_false' in field.controlparams,'"value_false":'+JSON.stringify(field.controlparams.value_false)+',') %>
        <%-xejs.iif('popup_copy_results' in field.controlparams,'"popup_copy_results":'+JSON.stringify(field.controlparams.popup_copy_results)+',') %>
        <%-xejs.iif('base_readonly' in field.controlparams,'"base_readonly":'+JSON.stringify(field.controlparams.base_readonly)+',') %>
        <%-xejs.iif('onpopup' in field.controlparams,'"onpopup":function(popupmodelid, parentmodelid, fieldid, onComplete){'+jslocals+field.controlparams.onpopup+'},') %>
      },<% }%>
      <% if(field.lov && field.lov.parent){ %>"lovparent":<%-JSON.stringify(field.lov.parent)%>, <% } %>
      <% if(field.lov && field.lov.parents){ %>"lovparents":<%-JSON.stringify(field.lov.parents)%>, <% } %>
      <% if(field.lov && ('blank' in field.lov)){ %>"lovblank":1, <% } %>
      }, <%});%>
  };

  xdatamodel.prototype.OnRender = XExt.XModel.OnRender(modelid);
  xdatamodel.prototype.GetValues = XExt.XModel.GetValues();
  xdatamodel.prototype.GetValue = XExt.XModel.GetValue(modelid);
  xdatamodel.prototype.HasUpdates = XExt.XModel.HasUpdates();
  xdatamodel.prototype.HasUpdate = XExt.XModel.HasUpdate();
  xdatamodel.prototype.OnControlUpdate = XExt.XModel.OnControlUpdate();
  xdatamodel.prototype.Commit = XExt.XModel.Commit(xmodel);
  xdatamodel.prototype.BindLOV = XExt.XModel.BindLOV(modelid);
  xdatamodel.prototype.OnDBError = function(err, stats, execParams, data){
    if(xmodel.layout=='form'){
      //If result not found
      if(err.Number==-1){
        //If this is a subform
        if(xmodel.parent){
          if(!jsh.is_insert){
            xmodel.controller.form.Data = new xmodel.datamodel();
            //Do not display popup message  / default error handler
            if(execParams.onComplete) execParams.onComplete(data);
            return false;
          }
        }
      }
    }
  }
  jsh.on('jsh_ready', function(){ xdatamodel.prototype.BindLOV(xmodel.controller.form); });

  xdatamodel.prototype.xvalidate = new XValidate(jsh);
  <% _.each(model.fields,function(field){ if(!('control' in field) || !field.name) return; if(jsh.is_insert && !model.topmost && model.bindings && (field.name in model.bindings)) return;  %>
  xdatamodel.prototype.xvalidate.AddControlValidator('.<%=field.name%>.xelem'+xmodel.class,'_obj.<%=field.name%>',"<%=field.caption_ext||field.caption%>",'<%=((("virtual" in field) && field.virtual)?xejs.getActions(model.actions,"BIU"):field.actions)%>',[<%-field.validate%>]);<%});%>

})(<%-instance%>);