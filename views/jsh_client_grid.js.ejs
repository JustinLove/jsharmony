/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
<% if(model.sample_data) return; %>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var moment = jsh.moment;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xsearch = null;
  var xeditablegrid = null;
  var xgrid = null;
  var xform = null;

  xcontroller.Init = function(callback){
    xsearch = xcontroller.search = new jsh.XForm('','.xsearch_template_'+xmodel.class,'.xsearch_'+xmodel.class);
    xsearch.Data = new jsh.XSearch.SearchQuery(new xmodel.datamodel());
    xsearch.Data.Items.unshift(new jsh.XSearch.SearchItem('ALL','','and','contains'));
    xsearch.OnAfterRender = function(){ 
      jsh.$root('.xsearch_'+xmodel.class+' input.xsearch_value').each(function(){ jsh.XBarcode.EnableScanner($(this)); }); 
      jsh.$root('.xsearch_'+xmodel.class+' input.xsearch_value.datepicker').each(function(){ 
        $(this).datepicker({ constrainInput: false, changeMonth: true, changeYear: true, dateFormat: jsh.DEFAULT_DATEFORMAT });
      }); 
    };
    xsearch.Render();
    <% if(model.grid_expand_search){ %>xcontroller.SearchExpand(0);<% } %>

    xform = xcontroller.form = new jsh.XForm(modelid,'','');
    xform.Data = new xmodel.datamodel();
    xform.DataType = xmodel.datamodel;

    var isInlinePopup = <%-xejs.iif(('inlinepopup' in model) && (model.inlinepopup),'true','false')%>;
    var grid_template = '<%=(model.templates.grid||'.xgrid_'+model.class+'_template')%>';
    var grid_placeholder = jsh.$root(grid_template).data('target');
    var scrollControl = (isInlinePopup ? jsh.$root(grid_placeholder).closest('.xpanel')[0] : window);
    xgrid = xcontroller.grid = new jsh.XGrid(modelid,grid_template,grid_placeholder,undefined,true,scrollControl);
    xgrid.NoResultsMessage = '<%-xejs.iif(('noresultsmessage' in model) && (model.noresultsmessage || (model.noresultsmessage==='')),model.noresultsmessage,'No results %%%FORSEARCHPHRASE%%%')%>';
    <% if(!('noresultsmessage' in model)){ %>
    if(xmodel.caption && xmodel.caption[2]){
      if(XExt.hasAction(xmodel.actions, 'I') && xmodel.commitlevel && (xmodel.commitlevel != 'none')){
        xgrid.NoDataMessage = '<a href="#" onclick="<%-js('xmodel.controller.AddRow();')%>">Add ' + xmodel.caption[1] + '</a>';
      }
      else {
        xgrid.NoDataMessage = 'No ' + xmodel.caption[2];
      }
    }
    <% } %>
    <% if(typeof model.sort != 'undefined'){ for(var i=0;i<model.sort.length;i++){ %> 
      xgrid.Sort.push('<%-model.sort[i]%>');
    <% } } %>
    xgrid.HasUpdates = function(){ if(this.RowCount==0) return false; return xform.HasUpdates(); };
    xgrid.Data = {};
    //Extended xData
    xgrid.Prop.ReselectAfterEdit = <%-xejs.iif(('reselectafteredit' in model) && (model.reselectafteredit),'true','false')%>;
    xgrid.Prop.NewRowPosition = '<%-xejs.iif('newrowposition' in model,model.newrowposition,'first')%>';
    xgrid.Prop.ModifiedSinceLoad = false;
    xgrid.Prop.Enabled = (isInlinePopup ? false : true);
    xgrid.Prop.isInlinePopup = isInlinePopup;
    xgrid.RequireSearch = <%-xejs.iif(model.grid_require_search,'true','false')%>;;
    xgrid.GetDBRowCount = <%-xejs.iif(('grid_rowcount' in model) && (model.grid_rowcount),'true','false')%>;

    <% if(!model.templates.grid){ %>
      xeditablegrid = xcontroller.editablegrid = new jsh.XEditableGrid(modelid,xmodel.commitlevel,'<%-xejs.iif('validationlevel' in model,model.validationlevel,'row')%>');
      xeditablegrid.Debug = true;
      xeditablegrid.OnRowEnter = function(rowid){ xform.SetIndex(rowid,false); }
      xeditablegrid.OnControlUpdate = function(obj,e){ xform.Data.OnControlUpdate(obj,e); }
      xeditablegrid.OnValidating = function(rowid,obj){ return xform.CommitRow(); }
      xeditablegrid.IsDirty = function(){ return xform.IsDirty; }
      xeditablegrid.OnCommit = xcontroller.OnCommit;
      xeditablegrid.OnCancelEdit = function(rowid,obj){ xcontroller.ResetRow(rowid); }
      xeditablegrid.SaveBeforeUpdate = <%=(parentfield && parentfield.controlparams && parentfield.controlparams.grid_save_before_update?'true':'false')%>;
    <% } %>

    xgrid.OnRowBind = function(jobj,datarow){
      if(!xeditablegrid) return;
      xeditablegrid.BindRow(jobj);
      xmodel.datamodel.prototype.BindLOV(xform,jobj);
      if(xmodel.onrowbind) xmodel.onrowbind(xmodel,jobj,datarow);
    };
    xgrid.OnMetaData = function(data){ xform.LOVs = this.LOVs; xform.defaults = this.defaults; xform.title = this.title; }
    xgrid.OnDBRowCount = function(data){ xcontroller.UpdateTitleCaption(); };
    xgrid.OnResetDataSet = function(data){
      xform.DataSet = []; xform.ResetDirty();
      if (data[this.q].length <= 0){ xform.Index = -1; }
      else{ xform.Index = 0; }
      this.Prop.ModifiedSinceLoad = false;
    }
    xgrid.OnRender = function(ejssource,data){
      xform.DataSet = xform.DataSet.concat(data[this.q]);
      for (var i = 0; i < data[this.q].length; i++) {
        var rowid = this.RowCount + i;
        xform.DataSet[rowid]['_is_insert'] = false;
        xform.DataSet[rowid]['_is_dirty'] = false;
        xform.DataSet[rowid]['_is_deleted'] = false;
        xform.DataSet[rowid]['_orig'] = null;
      }
      if(xeditablegrid){
        for (var i = 0; i < data[this.q].length; i++) {
          var rowid = this.RowCount + i;
          var ejsrslt = jsh.ejs.render(ejssource, { 
            rowid: rowid, 
            data: [data[this.q][i]], 
            xejs: XExt.xejs, 
            jsh: jsh, 
            _: _,
            moment: moment,
            XExt: XExt,
            instance: jsh.getInstance(),
            modelid: modelid,
            js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
          });
          var jobj = $(ejsrslt).appendTo(jsh.$root(this.PlaceholderID));
          xform.NavTo(rowid, false);
          this.OnRowBind(jobj);
        }
      }
      else {
        var ejsrslt = jsh.ejs.render(ejssource, { 
          rowid: this.RowCount, 
          data: data[this.q], 
          xejs: XExt.xejs,
          xmodel: xmodel,
          jsh: jsh,
          _: _,
          moment: moment,
          XExt: XExt,
          instance: jsh.getInstance(),
          modelid: modelid,
          js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
        });
        var jobj = $(ejsrslt).appendTo(jsh.$root(this.PlaceholderID));
      }
      $.colorbox.resize();
      this.RowCount += data[this.q].length;
    }
    xgrid.OnLoadMoreData = function(){
      if(this.Prop.ModifiedSinceLoad){ this.Select(); return; }
      this.Load(this.RowCount);
    }

    xform.xData = xgrid;
    xgrid.State.Search = xsearch.Data.Items;
    xgrid.State.Sort = xgrid.Sort;
    <%=xejs.iif(('disableautoload' in model) && (model.disableautoload),'xgrid.AutoLoadMore = false;') %>
    xgrid.OnBeforeSelect = function(){
      var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
      if(has_search_items){ 
        jsh.$root('.xsearchbutton<%=model.class%> span').html('Remove Search');
      }
      else{
        jsh.$root('.xsearchbutton<%=model.class%> span').html('Search');
      }
      xcontroller.UpdateTitleCaption();
    };
    xgrid.Select = function(done){
      //Get current number of pages
      if(!xgrid.Prop.Enabled){ if(done) done(); return;}
      var loadobj = "XFORM"+modelid;
      var init_rowcount = xgrid.RowCount;
      var init_scroll = $(window).scrollTop();
      jsh.xLoader.StartLoading(loadobj);
      var load_complete = false;
      //Load all pages
      for(var fieldname in xmodel.bindings){
        var bindval = xmodel.bindings[fieldname]();
        if(typeof bindval === 'undefined') delete xgrid.Data[fieldname];
        else if(bindval === '') delete xgrid.Data[fieldname];
        else xgrid.Data[fieldname] = bindval;
      }

      //Pass parameters from querystring
      for(var fieldname in xmodel.datamodel.prototype.Fields){
        if((fieldname in jsh._GET) && !(fieldname in xgrid.Data) && (xmodel.constant_bindings.indexOf(fieldname)<0)){
          var fieldval = jsh._GET[fieldname];
          if((typeof fieldval !== 'undefined') && (fieldval !== null)){
            xgrid.Data[fieldname] = fieldval;
          }
        }
      }

      if(jsh.is_browse) xgrid.Data._action = 'browse';
      else if(!jsh.is_insert || isInlinePopup || !XExt.hasAction(xmodel.actions, 'I')) delete xgrid.Data._action;
      else xgrid.Data._action = 'insert';

      var check_load_complete = function(){
        if(!xgrid) return;
        load_complete = (xgrid.EOF || (xgrid.RowCount >= init_rowcount));
        if(load_complete){ 
          //Move scrollbar
          $(window).scrollTop(init_scroll);
          //Remove loading animation
          jsh.xLoader.StopLoading(loadobj); 
          if(done) done(); 
        }
        else xgrid.Load(xgrid.RowCount,undefined,check_load_complete);
      };
      xgrid.GetMeta = true;
      xgrid.Load(undefined,undefined,check_load_complete);
    };

    xform.GetSelectParams = function(){
      var rslt = new Object();
      if(!jsh.is_insert || isInlinePopup){
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = xmodel.bindings[fieldname]();
        }
      }
      else{
        rslt._action = 'insert';
      }
      return rslt; 
    };
    xform.GetReselectParams = function(){
      var rslt = this.GetKeys();
      //Add bindings for GCOD
      for(var fieldname in xmodel.bindings){
        rslt[fieldname] = xmodel.bindings[fieldname]();
      }
      return rslt;
    };
    xform.GetDeleteParams = function(){
      var rslt = _.extend(this.GetFieldParams('D'), this.GetKeys());
      //Add bindings for GCOD
      for(var fieldname in xmodel.bindings){
        if(fieldname in rslt) rslt[fieldname] = xmodel.bindings[fieldname]();
      }
      return rslt;
    };
    //    return _.extend(this.GetFieldParams('D'), this.GetKeys()); 
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_insert){
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>rslt.<%=field['name']%> = this.Data.<%=field['name']%>;<%}); %>
      }
      else{
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = '%%%'+fieldname+'%%%';
        }
      }
      return rslt; 
    };

    xcontroller.UpdateTitleCaption();

    callback();
  }

  xcontroller.OnCommit = function(rowid,obj,onsuccess,oncancel){
    var dbtasks = xform.PrepSaveDataSet();
    
    xform.ExecuteTrans(dbtasks,function(rslt){
      //On Success
      xgrid.Prop.ModifiedSinceLoad = true;
      //Merge back results
      if('_success' in rslt){
        var dbrsltsuffix = '_'+modelid;
        for(var dbrslt in rslt){
          if(XExt.endsWith(dbrslt,dbrsltsuffix)){
            var taskidx = dbrslt.substr(0,dbrslt.length - dbrsltsuffix.length);
            var dbtaskid = 'insert_'+taskidx;
            if(dbtaskid in xform.DBTaskRows){
              var dbrowid = xform.DBTaskRows[dbtaskid];
              xform.DataSet[dbrowid] = _.extend(xform.DataSet[xform.Index], rslt[dbrslt]);
              if(xform.Index == dbrowid) xform.Data = _.extend(xform.Data, rslt[dbrslt]);
            }
          }
        }
      }

      xform.ResetDirty();

      //Bind oncommit handler if defined
      var orig_onsuccess = onsuccess;
      if(xmodel.oncommit) onsuccess = function(){ xmodel.oncommit(xmodel, rowid, orig_onsuccess); };
      
      if(xgrid.Prop.ReselectAfterEdit) xcontroller.Reselect(rowid,onsuccess);
      else if(onsuccess) onsuccess();

    },function(data){
      //On Fail
      if(xform.Data._jrow){
        $(xform.Data._jrow).find('.xform_ctrl').addClass(xmodel.datamodel.prototype.xvalidate.ErrorClass);
      }
      if(oncancel) oncancel(false);
      if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
      return true; //Error handled
    });
    return false;
  }

  xcontroller.Reselect = function(rowid,oncomplete,onfail){
    if(!xeditablegrid) return;
    if(rowid < 0){ XExt.Alert('Invalid Reselect Row ID'); return; }
    var _this = xform;
    
    if(rowid != _this.Index) if(!_this.SetIndex(rowid,true)) return;
    var reqdata = { rowstart: 0, rowcount: 1, d: JSON.stringify(_this.GetReselectParams()) };
    _this.XExecute(_this.q,reqdata,function(rslt){
      //Success
      if('_success' in rslt){
        if((_this.q in rslt) && (rslt[_this.q].length > 0)){
          _this.DataSet[rowid] = _.extend(_this.DataSet[rowid],rslt[_this.q][0]);
          _this.DataSet[rowid]['_is_insert'] = false;
          _this.DataSet[rowid]['_is_dirty'] = false;
          _this.DataSet[rowid]['_orig'] = null;

          var ejssource = jsh.$root(xgrid.TemplateID).html();
          ejssource = ejssource.replace(/<#/g, '<'+'%').replace(/#>/g, '%'+'>');
          var ejsrslt = jsh.ejs.render(ejssource, { 
            rowid: rowid, 
            data: [_this.DataSet[rowid]], 
            xejs: XExt.xejs, 
            jsh: jsh,
            _: _,
            moment: moment,
            XExt: XExt,
            instance: jsh.getInstance(),
            modelid: modelid,
            js: function(code){ return jsh.XExt.wrapJS(code,modelid); } 
          });
          var jobj = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
          jobj.replaceWith($(ejsrslt));
          jobj = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
          _this.SetIndex(rowid,false);
          _this.Render();
          xgrid.OnRowBind(jobj);
        }
        if(oncomplete) oncomplete();
      }
      else if(onfail) onfail(err);
    },function(err){
      //Fail
      if(onfail) onfail(err);
    });
  }



  xcontroller.ResetRow = function(rowid){
    if(!xeditablegrid) return;

    var oldrowid = -1;
    var oldobj = xeditablegrid.CurrentCell;
    if(oldobj) oldrowid = XExt.XModel.GetRowID(modelid,oldobj);

    //Get Data, if data is new, delete row from both grid and ...
    if(xform.DataSet[rowid]._is_insert) return xcontroller.DeleteRow(rowid);
    //If HasChanges
    if(oldrowid == rowid){ 
      if(xform.Data._orig != null)      xform.Data = _.extend(xform.Data, xform.Data._orig);
      xform.Data._orig = null;
      xform.Data._is_dirty = false;
      xform.DataSet[rowid] = _.extend(xform.DataSet[rowid], xform.Data);
      xform.Render();
    }
    else{
      if(xform.DataSet[rowid]._orig != null){

      }
    }
    xform.RecheckDirty();

    //Undo Changes
    //
  }

  xcontroller.AddRow = function(){
    if(!xeditablegrid) return;
    if(xeditablegrid.CurrentCell) if(!xform.CommitRow()) return;
    //Save parent and other items before adding, if commitlevel is row or cell
    if(xeditablegrid.SaveBeforeUpdate && ((xmodel.commitlevel == 'row') || (xmodel.commitlevel == 'cell'))){
      if (jsh.XPage.GetChanges().length > 0) { return XExt.Alert('Please save all changes before adding a row.'); }
    }
    
    var newrow = xform.NewRow();
    
    xgrid.RowCount++;
    var rowid = xgrid.RowCount-1;
    xgrid.Prop.ModifiedSinceLoad = true;
    
    var ejssource = "";
    if (xgrid.TemplateHTMLFunc != null) ejssource = xgrid.TemplateHTMLFunc(data, xgrid.RowCount);
    else ejssource = jsh.$root(xgrid.TemplateID).html();
    ejssource = ejssource.replace(/<#/g, '<'+'%').replace(/#>/g, '%'+'>');
    var ejsrslt = jsh.ejs.render(ejssource, {
      rowid: rowid,
      data: [newrow],
      xejs: XExt.xejs,
      jsh: jsh,
      _: _,
      moment: moment,
      XExt: XExt,
      instance: jsh.getInstance(),
      modelid: modelid,
      js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
    });

    var jobj;
    if(jsh.$root(xgrid.PlaceholderID).find('tr.xtbl_noresults').length){ jsh.$root(xgrid.PlaceholderID).find('tr.xtbl_noresults').remove(); }
    if(xgrid.Prop.NewRowPosition=='first'){
      jobj = $(ejsrslt).prependTo(jsh.$root(xgrid.PlaceholderID));
    }
    else if(jsh.$root(xgrid.PlaceholderID).find('.xtbl_loadmore').length){
      //Prepend
      jobj = $(ejsrslt).insertBefore(jsh.$root(xgrid.PlaceholderID).find('.xtbl_loadmore'));
    }
    else {
      jobj = $(ejsrslt).appendTo(jsh.$root(xgrid.PlaceholderID));
    }

    var oldindex = xform.Index;
    xform.NavTo(rowid,false);
    var newobj = $(jobj).find('.xform_ctrl.editable:visible').not('input[type=hidden]').first();
    newobj.focus();
    if(xgrid.OnRowBind) xgrid.OnRowBind(jobj);
    xeditablegrid.CurrentCell = document.activeElement;
    newobj.focus();
    return rowid;
  }

  xcontroller.DuplicateRow = function(dmodelid, rowid, obj, bindings){
    if(jsh.XPage.HasUpdates()){ XExt.Alert('Please save changes before duplicating.'); return false; }
    var rowdata = xform.DataSet[rowid];
    for(var binding in bindings){
      if(binding in rowdata){
        jsh.XModels[dmodelid][binding] = function(){ return rowdata[binding]; };
      }
    }
    XExt.popupShow(dmodelid,xmodel.class+'_duplicate','Duplicate <%=model.caption[1]%>',undefined,obj);
    return false;
  }

  xcontroller.DeleteRow = function(rowid){
    if(!xeditablegrid) return;
    XExt.Confirm("Are you sure you want to delete this <%=model.caption[1]%>?",function(){
      var oldrowid = -1;
      var oldobj = xeditablegrid.CurrentCell;
      if(oldobj) oldrowid = XExt.XModel.GetRowID(modelid,oldobj);

      if(oldrowid != rowid) if(!xform.CommitRow()) return;
    
      var exec_delete = function(){
        xgrid.Prop.ModifiedSinceLoad = true;
        xform.DataSet[rowid]._is_deleted = true;
        xform.DataSet[rowid]._is_insert = false;
        xform.DataSet[rowid]._is_dirty = false;
        xform.DataSet[rowid]._orig = null;
        jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']").remove();
        if(!jsh.$root(xgrid.PlaceholderID).find('tr').length) xgrid.RenderNoResultsMessage();
        xeditablegrid.CurrentCell = null;
        if(xform.Index==rowid){ 
          xform.Data._is_insert = false;
          xform.Data._is_dirty = false;
          xform.Data._orig = null;
          xform.Index = -1;
          for(var i=0;i<xform.Count();i++){
            if(!xform.DataSet[i]._is_deleted){ 
              xform.SetIndex(i,false);
              break;
            }
          }
        }
        xform.RecheckDirty();
      }

      if(!(xform.DataSet[rowid]._is_insert)){
        if(!(xform.DataSet[rowid] in xform.DeleteSet)) xform.DeleteSet.push(xform.DataSet[rowid]);

        if(xmodel.commitlevel == 'page'){
          exec_delete();
        }
        else{
          var dbtasks = xform.PrepSaveDataSet(true);
          xform.ExecuteTrans(dbtasks,function(rslt){
            //On Complete
            exec_delete();
            xform.ResetDirty();
        if(xmodel.oncommit) xmodel.oncommit(xmodel, -1, function(){});
          },function(data){
            //On Fail
            _.remove(xform.DeleteSet,xform.DataSet[rowid]);
            xform.RecheckDirty();
            if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
            return true; //Error handled
          });
        }
      }
      else exec_delete();
    });
  }

  xcontroller.Save = function(){
    if((xmodel.commitlevel == 'cell') ||
      (xmodel.commitlevel == 'row') ||
      (xmodel.commitlevel == 'page'))
      return xform.PrepSaveDataSet();
    return [];
  }

  xcontroller.GetState = function(){
    return xgrid.State;
  }

  xcontroller.LoadState = function(state){
    if('Sort' in state){
      xgrid.State.Sort = state.Sort;
      xgrid.Sort = state.Sort;
      xgrid.ResetSortGlyphs(jsh.$root('.xform'+xmodel.class));
    }
    if('Search' in state){
      xgrid.State.Search = state.Search;
      xsearch.Data.Items = state.Search;
      xsearch.Render();
      xgrid.SearchJSON = JSON.stringify(state.Search);
    }
  }

  xcontroller.Refresh = function(){
    if(jsh.XPage.onGridExit(null,function(){ xcontroller.Refresh(); })) return;
    xgrid.Load();
  }

  xcontroller.Sort = function(obj,fieldname){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(obj,function(){ xcontroller.Sort(obj,fieldname); })) return;
    xgrid.AddSort(obj,fieldname);
    xgrid.State.Sort = xgrid.Sort;
    jsh.XPage.AddHistory();
    return false;
  }

  xcontroller.HasSearchItems = function(val){
    var rslt = false;
    if(typeof val == 'undefined') val = xgrid.SearchJSON;
    if(val.trim() != ''){
      var sjson = JSON.parse(val);
      _.each(sjson,function(squery){
        if(squery.Value.trim() != '') rslt = true;
        if((squery.Comparison == 'null')||(squery.Comparison == 'notnull')) rslt = true; 
      });
    }
    return rslt;
  }

  xcontroller.SearchColumnChange = function(){
    xsearch.GetValues();
    xsearch.Render();
  }

  xcontroller.SearchComparisonChange = function(){
    xsearch.GetValues();
    xsearch.Render();
  }

  xcontroller.SearchJoinChange = function(){
    xsearch.GetValues();
    var d = xsearch.Data;
    if(d.Items.length > 0){
      var curjoin = d.Items[0].Join;
      if(curjoin == 'and') curjoin = 'or';
      else curjoin = 'and';
      for(var i=0;i<d.Items.length;i++){
        d.Items[i].Join = curjoin;
      }
      xsearch.Render();
    }
  }

  xcontroller.SearchExpand = function(timeout){
    if(jsh.$root('.xsearch_'+xmodel.class).is(':visible')) return;
    if(xsearch.Data.Items.length == 0){
      xcontroller.SearchAdd();
      jsh.$root('.xsearch_'+xmodel.class).slideDown(timeout,function(){ jsh.$root('.xsearch_'+xmodel.class+' .xsearch_value').first().select().focus(); });
    }
    else {
      jsh.$root('.xsearch_'+xmodel.class).slideDown(timeout,function(){ jsh.$root('.xsearch_'+xmodel.class+' .xsearch_value').first().select().focus(); });
    }
  }

  xcontroller.SearchButtonClick = function(){
    if(jsh.$root('.xsearchbutton'+xmodel.class+' span').html()=='Remove Search'){
      xsearch.Data.Items = [];
      xsearch.Render();
      jsh.$root('.xsearch_'+xmodel.class).hide();
      xcontroller.SearchExpand(400);
      xcontroller.RunSearch();
    }
    else{
      if(jsh.$root('.xsearch_'+xmodel.class).is(':visible')) jsh.$root('.xsearch_'+xmodel.class).slideUp();
      else xcontroller.SearchExpand(400);
    }
  }

  xcontroller.SearchKeyUp = function(event){
    if(event.keyCode==13) xcontroller.RunSearch();
  }

  xcontroller.SetSearch = function(searchitems,hide){
    if(hide) jsh.$root('.xsearch_'+xmodel.class).hide();
    xsearch.Data.Items = searchitems;
    xsearch.Render();
    xgrid.State.Search = searchitems;
    xgrid.SearchJSON = JSON.stringify(searchitems);
  }

  xcontroller.RunSearch = function(cb){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.RunSearch(); })) return;
    xsearch.GetValues();
    var searchitems = JSON.parse(JSON.stringify(xsearch.Data.Items));
    var has_search_items = false;
    _.each(searchitems,function(val){ 
      if(val.Value.trim() != '') has_search_items = true; 
      if((val.Comparison == 'null')||(val.Comparison == 'notnull')) has_search_items = true; 
    });
    //if (val.trim() != '') 
    var sjson = '';
    if(has_search_items){ 
      sjson = JSON.stringify(searchitems);
    }
    xgrid.State.Search = searchitems;
    jsh.XPage.AddHistory();
    xgrid.NewSearchJSON(sjson, cb);
  }

  xcontroller.SearchAdd = function(){
    xsearch.GetValues();
    xsearch.Data.Items.unshift(new jsh.XSearch.SearchItem('ALL','','and','contains'));
    xsearch.Render();
  }

  xcontroller.SearchRemove = function(obj){
    xsearch.GetValues();
    var idx = jsh.$root(xsearch.PlaceholderID).children().index($(obj).parent());
    xsearch.Data.Items.splice(idx,1);
    xsearch.Render();
  }

  xcontroller.Export = function(){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.Export(); })) return;
    xgrid.Load(0,0,function(url){
      jsh.getFileProxy().prop('src', url);
    },true);
  }

  xcontroller.UpdateTitleCaption = function(){
    var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
    var txt = '(';
    if(has_search_items) txt += 'Search';
    if((xgrid.DBRowCount == 0) && !has_search_items && xgrid.RequireSearch){}
    else if(xgrid.DBRowCount >= 0) txt += ((txt=='(')?'':' - ') + xgrid.DBRowCount.toLocaleString() + ' results';
    if(txt == '(') txt = '';
    else txt += ')';
    if(txt){
      jsh.$root('.xtitlecaption'+xmodel.class).show();
    }
    else {
      jsh.$root('.xtitlecaption'+xmodel.class).hide();
    }
    jsh.$root('.xtitlecaption'+xmodel.class+' a').text(txt);
  }

})(<%-instance%>);

<%-jsh.RenderView('jsh_grid.js.datamodel',ejsparams)%>