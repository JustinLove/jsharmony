/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
<% if(model.sample_data) return; %>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var moment = jsh.moment;
  var modelid = '<%=model.id%>';
  var modelclass = '<%=model.class%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = jsh.App['XController'+modelid] = xmodel.controller = function(){ }

  var xfilter = null;
  var xform_post = null;
  var xform = null;

  xcontroller.Init = function(callback){
    xfilter = jsh.App['xfilter_'+modelid] = new jsh.XForm('','.xfilter_template_'+modelid,'.xfilter_'+modelid);
    xfilter.Data = new jsh.XSearch.SearchQuery(new xmodel.datamodel());
    xfilter.Data.Items.unshift(new jsh.XSearch.SearchItem('ALL','','and','contains'));
    xfilter.OnAfterRender = function(){ 
      jsh.$root('.xfilter_'+modelclass+' input.xfilter_value').each(function(){ jsh.XBarcode.EnableScanner($(this)); }); 
      jsh.$root('.xfilter_'+modelclass+' input.xfilter_value.datepicker').each(function(){ 
        $(this).datepicker({ constrainInput: false, changeMonth: true, changeYear: true, dateFormat: jsh.DEFAULT_DATEFORMAT });
      }); 
    };
    xfilter.Render();
    <% if(model.grid_expand_filter){ %>xcontroller.FilterExpand(0);<% } %>

    var xform_post_<%=model.id%> = jsh.App.xform_post_<%=model.id%> = new jsh.XForm(modelid,'','');
    xform_post_<%=model.id%>.Data = new xmodel.datamodel();
    xform_post_<%=model.id%>.DataType = xmodel.datamodel;

    var isInlinePopup = <%-xejs.iif(('inlinepopup' in model) && (model.inlinepopup),'true','false')%>;
    var grid_template = '<%=(model.templates.grid||'.xgrid_'+model.id+'_template')%>';
    var grid_placeholder = jsh.$root(grid_template).data('target');
    var scrollControl = (isInlinePopup ? jsh.$root(grid_placeholder).closest('.xpanel')[0] : window);
    var xform_<%=model.id%> = jsh.App.xform_<%=model.id%> = new jsh.XGrid(modelid,grid_template,grid_placeholder,undefined,true,scrollControl);
    xform_<%=model.id%>.NoResultsMessage = '<%-xejs.iif(('noresultsmessage' in model) && (model.noresultsmessage || (model.noresultsmessage==='')),model.noresultsmessage,'No results found %%%FORSEARCHPHRASE%%%')%>';
    <% if(typeof model.sort != 'undefined'){ for(var i=0;i<model.sort.length;i++){ %> 
    xform_<%=model.id%>.Sort.push('<%-model.sort[i]%>');
      <% } } %>
      xform_<%=model.id%>.HasUpdates = function(){ if(this.RowCount==0) return false; return xform_post_<%=model.id%>.HasUpdates(); };
    xform_<%=model.id%>.Data = {};
    //Extended xData
    xform_<%=model.id%>.Prop.ReselectAfterEdit = <%-xejs.iif(('reselectafteredit' in model) && (model.reselectafteredit),'true','false')%>;
    xform_<%=model.id%>.Prop.NewRowPosition = '<%-xejs.iif('newrowposition' in model,model.newrowposition,'first')%>';
    xform_<%=model.id%>.Prop.ModifiedSinceLoad = false;
    xform_<%=model.id%>.Prop.Enabled = (isInlinePopup ? false : true);
    xform_<%=model.id%>.Prop.isInlinePopup = isInlinePopup;
    xform_<%=model.id%>.RequireFilter = <%-xejs.iif(model.grid_require_filter,'true','false')%>;;
    xform_<%=model.id%>.GetDBRowCount = <%-xejs.iif(('grid_rowcount' in model) && (model.grid_rowcount),'true','false')%>;

    <% if(!model.templates.grid){ %>
      var xgrid_<%=model.id%> = jsh.App.xgrid_<%=model.id%> = new jsh.XEditableGrid(modelid,jsh.XModels[modelid]._commitlevel,'<%-xejs.iif('validationlevel' in model,model.validationlevel,'row')%>');
      xgrid_<%=model.id%>.Debug = true;
      xgrid_<%=model.id%>.OnRowEnter = function(rowid){ xform_post_<%=model.id%>.SetIndex(rowid,false); }
      xgrid_<%=model.id%>.OnControlUpdate = function(obj,e){ xform_post_<%=model.id%>.Data.OnControlUpdate(obj,e); }
      xgrid_<%=model.id%>.OnValidating = function(rowid,obj){ return xform_post_<%=model.id%>.CommitRow(); }
      xgrid_<%=model.id%>.IsDirty = function(){ return xform_post_<%=model.id%>.IsDirty; }
      xgrid_<%=model.id%>.OnCommit = xcontroller.OnCommit;
      xgrid_<%=model.id%>.OnCancelEdit = function(rowid,obj){ xcontroller.ResetRow(rowid); }
      xgrid_<%=model.id%>.SaveBeforeUpdate = <%=(model.grid_save_before_update?'true':'false')%>;
    <% } %>

    xform_<%=model.id%>.OnRowBind = function(jobj,datarow){
      if(!jsh.App.xgrid_<%=model.id%>) return;
      jsh.App.xgrid_<%=model.id%>.BindRow(jobj);
      xmodel.datamodel.prototype.BindLOV(xform_post_<%=model.id%>,jobj);
      var xform = jsh.XModels[modelid];
      if(xform._onrowbind) xform._onrowbind(xform,jobj,datarow);
    };
    xform_<%=model.id%>.OnMetaData = function(data){ xform_post_<%=model.id%>._LOVs = this._LOVs; xform_post_<%=model.id%>._defaults = this._defaults; xform_post_<%=model.id%>._title = this._title; }
    xform_<%=model.id%>.OnDBRowCount = function(data){ xcontroller.UpdateTitleCaption(); };
    xform_<%=model.id%>.OnResetDataSet = function(data){ var xpost = xform_post_<%=model.id%>;
      xpost.DataSet = []; xpost.ResetDirty();
      if (data[this.q].length <= 0){ xpost.Index = -1; }
      else{ xpost.Index = 0; }
      this.Prop.ModifiedSinceLoad = false;
    }
    xform_<%=model.id%>.OnRender = function(ejssource,data){ var xpost = xform_post_<%=model.id%>;
      xpost.DataSet = xpost.DataSet.concat(data[this.q]);
      for (var i = 0; i < data[this.q].length; i++) {
        var rowid = this.RowCount + i;
        xpost.DataSet[rowid]['_is_new'] = false;
        xpost.DataSet[rowid]['_is_dirty'] = false;
        xpost.DataSet[rowid]['_is_deleted'] = false;
        xpost.DataSet[rowid]['_orig'] = null;
      }
      if(jsh.App.xgrid_<%=model.id%>){
        for (var i = 0; i < data[this.q].length; i++) {
          var rowid = this.RowCount + i;
          var ejsrslt = jsh.ejs.render(ejssource, { 
            rowid: rowid, 
            data: [data[this.q][i]], 
            xejs: XExt.xejs, 
            jsh: jsh, 
            _: _,
            moment: moment,
            XExt: XExt,
            instance: jsh.getInstance(),
            modelid: modelid,
            js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
          });
          console.log(ejsrslt);
          var jobj = $(ejsrslt).appendTo(jsh.$root(this.PlaceholderID));
          xpost.NavTo(rowid, false);
          this.OnRowBind(jobj);
        }
      }
      else {
        var ejsrslt = jsh.ejs.render(ejssource, { 
          rowid: this.RowCount, 
          data: data[this.q], 
          xejs: XExt.xejs,
          xform: xform_<%=model.id%>,
          xform_meta: jsh.XModels[modelid],
          jsh: jsh,
          _: _,
          moment: moment,
          XExt: XExt,
          instance: jsh.getInstance(),
          modelid: modelid,
          js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
        });
        var jobj = $(ejsrslt).appendTo(jsh.$root(this.PlaceholderID));
      }
      $.colorbox.resize();
      this.RowCount += data[this.q].length;
    }
    xform_<%=model.id%>.OnLoadMoreData = function(){
      if(this.Prop.ModifiedSinceLoad){ this.Select(); return; }
      this.Load(this.RowCount);
    }

    xform_post_<%=model.id%>.xData = xform_<%=model.id%>;
    xform_<%=model.id%>.State.Search = xfilter.Data.Items;
    xform_<%=model.id%>.State.Sort = xform_<%=model.id%>.Sort;
    <%=xejs.iif(('disableautoload' in model) && (model.disableautoload),'xform_'+model.id+'.AutoLoadMore = false;') %>
    xform_<%=model.id%>.OnBeforeSelect = function(){
      var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
      if(has_search_items){ 
        jsh.$root('.xfilterbutton<%=model.id%> span').html('Remove Filter');
      }
      else{
        jsh.$root('.xfilterbutton<%=model.id%> span').html('Filter');
      }
      xcontroller.UpdateTitleCaption();
    };
    xform_<%=model.id%>.Select = function(done){
      //Get current number of pages
      if(!xform_<%=model.id%>.Prop.Enabled){ if(done) done(); return;}
      var loadobj = "XFORM<%=model.id%>";
      var init_rowcount = xform_<%=model.id%>.RowCount;
      var init_scroll = $(window).scrollTop();
      jsh.xLoader.StartLoading(loadobj);
      var load_complete = false;
      //Load all pages
      _.each(jsh.XModels[modelid]._bindings,function(binding){
        var bindval = jsh.XModels[modelid][binding]();
        if(typeof bindval === 'undefined') delete xform_<%=model.id%>.Data[binding];
        else if(bindval === '') delete xform_<%=model.id%>.Data[binding];
        else xform_<%=model.id%>.Data[binding] = bindval;
      });

      //Pass parameters from querystring
      for(var fieldname in xmodel.datamodel.prototype.Fields){
        if((fieldname in jsh._GET) && !(fieldname in xform_<%=model.id%>.Data) && (jsh.XModels[modelid]._constant_bindings.indexOf(fieldname)<0)){
          var fieldval = jsh._GET[fieldname];
          if((typeof fieldval !== 'undefined') && (fieldval !== null)){
            xform_<%=model.id%>.Data[fieldname] = fieldval;
          }
        }
      }

      if(!jsh.is_add || isInlinePopup || !XExt.HasAccess(jsh.XModels[modelid]._actions, 'I')) delete xform_<%=model.id%>.Data._action;
      else xform_<%=model.id%>.Data._action = 'add';

      var check_load_complete = function(){
        if(!xform_<%=model.id%>) return;
        load_complete = (xform_<%=model.id%>.EOF || (xform_<%=model.id%>.RowCount >= init_rowcount));
        if(load_complete){ 
          //Move scrollbar
          $(window).scrollTop(init_scroll);
          //Remove loading animation
          jsh.xLoader.StopLoading(loadobj); 
          if(done) done(); 
        }
        else xform_<%=model.id%>.Load(xform_<%=model.id%>.RowCount,undefined,check_load_complete);
      };
      xform_<%=model.id%>.GetMeta = true;
      xform_<%=model.id%>.Load(undefined,undefined,check_load_complete);
    };

    xform_post_<%=model.id%>.GetSelectParams = function(){
      var rslt = new Object();
      if(!jsh.is_add || isInlinePopup){
        _.each(jsh.XModels[modelid]._bindings,function(binding){
          rslt[binding] = jsh.XModels[modelid][binding]();
        });
      }
      else{
        rslt._action = 'add';
      }
      return rslt; 
    };
    xform_post_<%=model.id%>.GetReselectParams = function(){
      var rslt = this.GetKeys();
      //Add bindings for GCOD
      _.each(jsh.XModels[modelid]._bindings,function(binding){
        rslt[binding] = jsh.XModels[modelid][binding]();
      });
      return rslt;
    };
    xform_post_<%=model.id%>.GetDeleteParams = function(){
      var rslt = _.extend(this.GetFieldParams('D'), this.GetKeys());
      //Add bindings for GCOD
      _.each(jsh.XModels[modelid]._bindings,function(binding){
        if(binding in rslt) rslt[binding] = jsh.XModels[modelid][binding]();
      });
      return rslt;
    };
    //    return _.extend(this.GetFieldParams('D'), this.GetKeys()); 
    xform_post_<%=model.id%>.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_add){
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>rslt.<%=field['name']%> = this.Data.<%=field['name']%>;<%}); %>
      }
      else{
        _.each(jsh.XModels[modelid]._bindings,function(binding){
          rslt[binding] = '%%%'+binding+'%%%';
        });
      }
      return rslt; 
    };

    xcontroller.UpdateTitleCaption();

    callback();
  }

  xcontroller.OnCommit = function(rowid,obj,onsuccess,oncancel){
    var xpost = jsh.App.xform_post_<%=model.id%>;
    var dbtasks = xpost.PrepSaveDataSet();
    
    xpost.ExecuteTrans(dbtasks,function(rslt){
      //On Success
      jsh.App.xform_<%=model.id%>.Prop.ModifiedSinceLoad = true;
      //Merge back results
      if('_success' in rslt){
        var dbrsltsuffix = '_<%=model.id%>';
        for(var dbrslt in rslt){
          if(XExt.endsWith(dbrslt,dbrsltsuffix)){
            var taskidx = dbrslt.substr(0,dbrslt.length - dbrsltsuffix.length);
            var dbtaskid = 'insert_'+taskidx;
            if(dbtaskid in xpost.DBTaskRows){
              var dbrowid = xpost.DBTaskRows[dbtaskid];
              xpost.DataSet[dbrowid] = _.extend(xpost.DataSet[xpost.Index], rslt[dbrslt]);
              if(xpost.Index == dbrowid) xpost.Data = _.extend(xpost.Data, rslt[dbrslt]);
            }
          }
        }
      }

      xpost.ResetDirty();

      //Bind oncommit handler if defined
      var orig_onsuccess = onsuccess;
      if(jsh.XModels[modelid]._oncommit) onsuccess = function(){ jsh.XModels[modelid]._oncommit(jsh.XModels[modelid], rowid, orig_onsuccess); };
      
      if(jsh.App.xform_<%=model.id%>.Prop.ReselectAfterEdit) xcontroller.Reselect(rowid,onsuccess);
      else if(onsuccess) onsuccess();

    },function(data){
      //On Fail
      if(xpost.Data._jrow){
        $(xpost.Data._jrow).find('.xform_ctrl').addClass(xmodel.datamodel.prototype.xvalidate.ErrorClass);
      }
      if(oncancel) oncancel(false);
      if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
      return true; //Error handled
    });
    return false;
  }

  xcontroller.Reselect = function(rowid,oncomplete,onfail){
    if(!jsh.App.xgrid_<%=model.id%>) return;
    if(rowid < 0){ XExt.Alert('Invalid Reselect Row ID'); return; }
    var _this = jsh.App.xform_post_<%=model.id%>;
    
    var xdata = jsh.App.xform_<%=model.id%>;
    if(rowid != _this.Index) if(!_this.SetIndex(rowid,true)) return;
    var reqdata = { rowstart: 0, rowcount: 1, d: JSON.stringify(_this.GetReselectParams()) };
    _this.XExecute(_this.q,reqdata,function(rslt){
      //Success
      if('_success' in rslt){
        if((_this.q in rslt) && (rslt[_this.q].length > 0)){
          _this.DataSet[rowid] = _.extend(_this.DataSet[rowid],rslt[_this.q][0]);
          _this.DataSet[rowid]['_is_new'] = false;
          _this.DataSet[rowid]['_is_dirty'] = false;
          _this.DataSet[rowid]['_orig'] = null;

          var ejssource = jsh.$root(xdata.TemplateID).html();
          ejssource = ejssource.replace(/<#/g, '<'+'%').replace(/#>/g, '%'+'>');
          var ejsrslt = jsh.ejs.render(ejssource, { 
            rowid: rowid, 
            data: [_this.DataSet[rowid]], 
            xejs: XExt.xejs, 
            jsh: jsh,
            _: _,
            moment: moment,
            XExt: XExt,
            instance: jsh.getInstance(),
            modelid: modelid,
            js: function(code){ return jsh.XExt.wrapJS(code,modelid); } 
          });
          var jobj = jsh.$root(xdata.PlaceholderID).find("tr[data-id='" + rowid + "']");
          jobj.replaceWith($(ejsrslt));
          jobj = jsh.$root(xdata.PlaceholderID).find("tr[data-id='" + rowid + "']");
          _this.SetIndex(rowid,false);
          _this.Render();
          xdata.OnRowBind(jobj);
        }
        if(oncomplete) oncomplete();
      }
      else if(onfail) onfail(err);
    },function(err){
      //Fail
      if(onfail) onfail(err);
    });
  }



  xcontroller.ResetRow = function(rowid){
    if(!jsh.App.xgrid_<%=model.id%>) return;
    var xpost = jsh.App.xform_post_<%=model.id%>;
    var xdata = jsh.App.xform_<%=model.id%>;

    var oldrowid = -1;
    var oldobj = jsh.App.xgrid_<%=model.id%>.CurrentCell;
    if(oldobj) oldrowid = XExt.XModel.GetRowID(modelid,oldobj);

    //Get Data, if data is new, delete row from both grid and ...
    if(xpost.DataSet[rowid]._is_new) return xcontroller.DeleteRow(rowid);
    //If HasChanges
    if(oldrowid == rowid){ 
      if(xpost.Data._orig != null)      xpost.Data = _.extend(xpost.Data, xpost.Data._orig);
      xpost.Data._orig = null;
      xpost.Data._is_dirty = false;
      xpost.DataSet[rowid] = _.extend(xpost.DataSet[rowid], xpost.Data);
      xpost.Render();
    }
    else{
      if(xpost.DataSet[rowid]._orig != null){

      }
    }
    xpost.RecheckDirty();

    //Undo Changes
    //
  }

  xcontroller.AddRow = function(){
    if(!jsh.App.xgrid_<%=model.id%>) return;
    var xpost = jsh.App.xform_post_<%=model.id%>;
    var xdata = jsh.App.xform_<%=model.id%>;
    if(jsh.App.xgrid_<%=model.id%>.CurrentCell) if(!xpost.CommitRow()) return;
    //Save parent and other items before adding, if commitlevel is row or cell
    if(jsh.App.xgrid_<%=model.id%>.SaveBeforeUpdate && ((jsh.XModels[modelid]._commitlevel == 'row') || (jsh.XModels[modelid]._commitlevel == 'cell'))){
      if (jsh.XPage.GetChanges().length > 0) { return XExt.Alert('Please save all changes before adding a row.'); }
    }
    
    var newrow = xpost.NewRow();
    
    xdata.RowCount++;
    var rowid = xdata.RowCount-1;
    jsh.App.xform_<%=model.id%>.Prop.ModifiedSinceLoad = true;
    
    var ejssource = "";
    if (xdata.TemplateHTMLFunc != null) ejssource = xdata.TemplateHTMLFunc(data, xdata.RowCount);
    else ejssource = jsh.$root(xdata.TemplateID).html();
    ejssource = ejssource.replace(/<#/g, '<'+'%').replace(/#>/g, '%'+'>');
    var ejsrslt = jsh.ejs.render(ejssource, {
      rowid: rowid,
      data: [newrow],
      xejs: XExt.xejs,
      jsh: jsh,
      _: _,
      moment: moment,
      XExt: XExt,
      instance: jsh.getInstance(),
      modelid: modelid,
      js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
    });

    var jobj;
    if(jsh.$root(xdata.PlaceholderID).find('tr.xtbl_noresults').length){ jsh.$root(xdata.PlaceholderID).find('tr.xtbl_noresults').remove(); }
    if(xdata.Prop.NewRowPosition=='first'){
      jobj = $(ejsrslt).prependTo(jsh.$root(xdata.PlaceholderID));
    }
    else if(jsh.$root(xdata.PlaceholderID).find('.xtbl_loadmore').length){
      //Prepend
      jobj = $(ejsrslt).insertBefore(jsh.$root(xdata.PlaceholderID).find('.xtbl_loadmore'));
    }
    else {
      jobj = $(ejsrslt).appendTo(jsh.$root(xdata.PlaceholderID));
    }

    var oldindex = xpost.Index;
    xpost.NavTo(rowid,false);
    var newobj = $(jobj).find('.xform_ctrl.editable:visible').not('input[type=hidden]').first();
    newobj.focus();
    if(xdata.OnRowBind) xdata.OnRowBind(jobj);
    jsh.App.xgrid_<%=model.id%>.CurrentCell = document.activeElement;
    newobj.focus();
    return rowid;
  }

  xcontroller.DuplicateRow = function(dmodelid, rowid, obj, bindings){
    var xpost = jsh.App.xform_post_<%=model.id%>;
    if(jsh.XPage.HasUpdates()){ XExt.Alert('Please save changes before duplicating.'); return false; }
    var rowdata = xpost.DataSet[rowid];
    for(var binding in bindings){
      if(binding in rowdata){
        jsh.XModels[dmodelid][binding] = function(){ return rowdata[binding]; };
      }
    }
    XExt.popupShow(dmodelid,'<%=model.id%>_duplicate','Duplicate <%=model.caption[1]%>',undefined,obj);
    return false;
  }

  xcontroller.DeleteRow = function(rowid){
    if(!jsh.App.xgrid_<%=model.id%>) return;
    XExt.Confirm("Are you sure you want to delete this <%=model.caption[1]%>?",function(){
      var xpost = jsh.App.xform_post_<%=model.id%>;
      var xdata = jsh.App.xform_<%=model.id%>;

      var oldrowid = -1;
      var oldobj = jsh.App.xgrid_<%=model.id%>.CurrentCell;
      if(oldobj) oldrowid = XExt.XModel.GetRowID(modelid,oldobj);

      if(oldrowid != rowid) if(!xpost.CommitRow()) return;
    
      var exec_delete = function(){
        jsh.App.xform_<%=model.id%>.Prop.ModifiedSinceLoad = true;
        xpost.DataSet[rowid]._is_deleted = true;
        xpost.DataSet[rowid]._is_new = false;
        xpost.DataSet[rowid]._is_dirty = false;
        xpost.DataSet[rowid]._orig = null;
        jsh.$root(xdata.PlaceholderID).find("tr[data-id='" + rowid + "']").remove();
        jsh.App.xgrid_<%=model.id%>.CurrentCell = null;
        if(xpost.Index==rowid){ 
          xpost.Data._is_new = false;
          xpost.Data._is_dirty = false;
          xpost.Data._orig = null;
          xpost.Index = -1;
          for(var i=0;i<xpost.Count();i++){
            if(!xpost.DataSet[i]._is_deleted){ 
              xpost.SetIndex(i,false);
              break;
            }
          }
        }
        xpost.RecheckDirty();
      }

      if(!(xpost.DataSet[rowid]._is_new)){
        if(!(xpost.DataSet[rowid] in xpost.DeleteSet)) xpost.DeleteSet.push(xpost.DataSet[rowid]);

        if(jsh.XModels[modelid]._commitlevel == 'page'){
          exec_delete();
        }
        else{
          var dbtasks = xpost.PrepSaveDataSet(true);
          xpost.ExecuteTrans(dbtasks,function(rslt){
            //On Complete
            exec_delete();
            xpost.ResetDirty();
        if(jsh.XModels[modelid]._oncommit) jsh.XModels[modelid]._oncommit(jsh.XModels[modelid], -1, function(){});
          },function(data){
            //On Fail
            _.remove(xpost.DeleteSet,xpost.DataSet[rowid]);
            xpost.RecheckDirty();
            if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
            return true; //Error handled
          });
        }
      }
      else exec_delete();
    });
  }

  xcontroller.Save = function(){
    if((jsh.XModels[modelid]._commitlevel == 'cell') ||
      (jsh.XModels[modelid]._commitlevel == 'row') ||
      (jsh.XModels[modelid]._commitlevel == 'page'))
      return jsh.App.xform_post_<%=model.id%>.PrepSaveDataSet();
    return [];
  }

  xcontroller.GetState = function(){
    return jsh.App.xform_<%=model.id%>.State;
  }

  xcontroller.LoadState = function(state){
    if('Sort' in state){
      jsh.App.xform_<%=model.id%>.State.Sort = state.Sort;
      jsh.App.xform_<%=model.id%>.Sort = state.Sort;
      jsh.App.xform_<%=model.id%>.ResetSortGlyphs(jsh.$root('.xform<%=model.id%>'));
    }
    if('Search' in state){
      jsh.App.xform_<%=model.id%>.State.Search = state.Search;
      xfilter.Data.Items = state.Search;
      xfilter.Render();
      jsh.App.xform_<%=model.id%>.SearchJSON = JSON.stringify(state.Search);
    }
  }

  xcontroller.Refresh = function(){
    if(jsh.XPage.onGridExit(null,function(){ xcontroller.Refresh(); })) return;
    jsh.App.xform_<%=model.id%>.Load();
  }

  xcontroller.Sort = function(obj,fieldname){
    if(!jsh.App.xform_<%=model.id%>.Prop.isInlinePopup) if(jsh.XPage.onGridExit(obj,function(){ xcontroller.Sort(obj,fieldname); })) return;
    jsh.App.xform_<%=model.id%>.AddSort(obj,fieldname);
    jsh.App.xform_<%=model.id%>.State.Sort = jsh.App.xform_<%=model.id%>.Sort;
    jsh.XPage.AddHistory();
    return false;
  }

  xcontroller.HasSearchItems = function(val){
    var rslt = false;
    if(typeof val == 'undefined') val = jsh.App.xform_<%=model.id%>.SearchJSON;
    if(val.trim() != ''){
      var sjson = JSON.parse(val);
      _.each(sjson,function(squery){
        if(squery.Value.trim() != '') rslt = true;
        if((squery.Comparison == 'null')||(squery.Comparison == 'notnull')) rslt = true; 
      });
    }
    return rslt;
  }

  xcontroller.FilterColumnChange = function(){
    xfilter.GetValues();
    xfilter.Render();
  }

  xcontroller.FilterComparisonChange = function(){
    xfilter.GetValues();
    xfilter.Render();
  }

  xcontroller.FilterJoinChange = function(){
    xfilter.GetValues();
    var d = xfilter.Data;
    if(d.Items.length > 0){
      var curjoin = d.Items[0].Join;
      if(curjoin == 'and') curjoin = 'or';
      else curjoin = 'and';
      for(var i=0;i<d.Items.length;i++){
        d.Items[i].Join = curjoin;
      }
      xfilter.Render();
    }
  }

  xcontroller.FilterExpand = function(timeout){
    if(jsh.$root('.xfilter_'+modelclass).is(':visible')) return;
    if(xfilter.Data.Items.length == 0){
      xcontroller.FilterAdd();
      jsh.$root('.xfilter_'+modelclass).slideDown(timeout,function(){ jsh.$root('.xfilter_'+modelclass+' .xfilter_value').first().select().focus(); });
    }
    else {
      jsh.$root('.xfilter_'+modelclass).slideDown(timeout,function(){ jsh.$root('.xfilter_'+modelclass+' .xfilter_value').first().select().focus(); });
    }
  }

  xcontroller.FilterButton = function(){
    if(jsh.$root('.xfilterbutton'+modelclass+' span').html()=='Remove Filter'){
      xfilter.Data.Items = [];
      xfilter.Render();
      jsh.$root('.xfilter_'+modelclass).hide();
      xcontroller.FilterExpand(400);
      xcontroller.FilterApply();
    }
    else{
      if(jsh.$root('.xfilter_'+modelclass).is(':visible')) jsh.$root('.xfilter_'+modelclass).slideUp();
      else xcontroller.FilterExpand(400);
    }
  }

  xcontroller.FilterKeyUp = function(event){
    if(event.keyCode==13) xcontroller.FilterApply();
  }

  xcontroller.SetFilter = function(searchitems,hide){
    if(hide) jsh.$root('.xfilter_'+modelclass).hide();
    xfilter.Data.Items = searchitems;
    xfilter.Render();
    jsh.App.xform_<%=model.id%>.State.Search = searchitems;
    jsh.App.xform_<%=model.id%>.SearchJSON = JSON.stringify(searchitems);
  }

  xcontroller.FilterApply = function(cb){
    if(!jsh.App.xform_<%=model.id%>.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.FilterApply(); })) return;
    xfilter.GetValues();
    var searchitems = JSON.parse(JSON.stringify(xfilter.Data.Items));
    var has_search_items = false;
    _.each(searchitems,function(val){ 
      if(val.Value.trim() != '') has_search_items = true; 
      if((val.Comparison == 'null')||(val.Comparison == 'notnull')) has_search_items = true; 
    });
    //if (val.trim() != '') 
    var sjson = '';
    if(has_search_items){ 
      sjson = JSON.stringify(searchitems);
    }
    jsh.App.xform_<%=model.id%>.State.Search = searchitems;
    jsh.XPage.AddHistory();
    jsh.App.xform_<%=model.id%>.NewSearchJSON(sjson, cb);
  }

  xcontroller.FilterAdd = function(){
    xfilter.GetValues();
    xfilter.Data.Items.unshift(new jsh.XSearch.SearchItem('ALL','','and','contains'));
    xfilter.Render();
  }

  xcontroller.FilterRemove = function(obj){
    xfilter.GetValues();
    var idx = jsh.$root(xfilter.PlaceholderID).children().index($(obj).parent());
    xfilter.Data.Items.splice(idx,1);
    xfilter.Render();
  }

  xcontroller.Export = function(){
    if(!jsh.App.xform_<%=model.id%>.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.Export(); })) return;
    jsh.App.xform_<%=model.id%>.Load(0,0,function(url){
      jsh.getFileProxy().prop('src', url);
    },true);
  }

  xcontroller.UpdateTitleCaption = function(){
    var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
    var txt = '(';
    if(has_search_items) txt += 'filtered';
    if(jsh.App.xform_<%=model.id%>.DBRowCount >= 0) txt += ((txt=='(')?'':' - ') + jsh.App.xform_<%=model.id%>.DBRowCount.toLocaleString() + ' rows';
    if(txt == '(') txt = '';
    else txt += ')';
    if(txt){
      jsh.$root('.xtitlecaption<%=model.id%>').show();
    }
    else {
      jsh.$root('.xtitlecaption<%=model.id%>').hide();
    }
    jsh.$root('.xtitlecaption<%=model.id%> a').text(txt);
  }

})(<%-instance%>);

<%-jsh.RenderView('jsh_grid.js.datamodel',ejsparams)%>