<script type="text/javascript">
/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
(function(jsh){
  <% if(model.topmost){ %>
  jsh.XModels = {};
  jsh.XBase = {};
  jsh.XModels_root = '<%=model.id%>';
  jsh.XPopups = {};
  jsh.is_popup = <%=xejs.iif('popup' in model,'true','false')%>;
  <% } %>
  <%-jslocals%>
  <%
  var curtab = null;
  if(model.tabs && model.tabs.length){
    var tab = _.find(model.tabs,function(tab){ return tab.selected; });
    if(tab) curtab = tab.modelid;
  }
  var bindings = model.bindings;
  if(model.topmost && (typeof bindings == 'undefined')){
    if((model.layout=='form-m')||(model.layout=='multisel')){
      _.each(model.fields, function(field){
        if(field.name && XExt.access(field.actions,'F') && (field.name in jsh._GET) && jsh._GET[field.name]){
          if(!bindings) bindings = {};
          bindings[field.name] = "'" + XExt.escapeJS(jsh._GET[field.name]) + "'";
        }
      });
    }
  }
  %>
  jsh.XModels['<%=model.id%>'] = {
    _id:'<%=model.id%>',
    _actions:'<%=model.actions%>',
    _layout:'<%=model.layout%>',
    _title: <%-xejs.iif(model.title,JSON.stringify(model.title),"''")%>,
    _caption:<%-JSON.stringify(model.caption)%>,
    _parent:<%-((typeof parent == 'undefined')?'null':"'"+parent.id+"'")%>,
    _bindings:<%-((typeof bindings == 'undefined')?'null':JSON.stringify(_.keys(bindings)))%>,
    _constant_bindings:<%-JSON.stringify(_.keys(_.pickBy(bindings, function(value, key){ if(typeof jsh.XExt.LiteralOrCollection(value) != 'undefined') return true; return false; })))%>,
    _keys:[<% xejs.eachKey(model.fields,function(field){%>'<%=field.name%>',<%});%>],
    _commitlevel:'<%=(model.commitlevel?model.commitlevel:'')%>',
    _curtab:<%-(curtab?JSON.stringify(curtab):'null')%>,
  //  _is_new:(jsh._GET['action']=='add'),
    <% 
    if(model.topmost) _.each(model.fields,function(field){ if(field.lovkey || field.key || (bindings && (field.name in bindings))) {%><%=field['name']%>: function(){return jsh.XExt.LiteralOrCollection(<%-JSON.stringify(field['name'])%>,jsh._GET);},<%	}});
    else if(typeof bindings != 'undefined') _.each(bindings,function(val,key){%><%=key%>: function(){return jsh.XExt.LiteralOrCollection(<%-JSON.stringify(val)%>,jsh.App.xform_<%=parent.id%>.Data,jsh.XModels['<%=parent.id%>']);},<%}); 
    
    if('oninit' in model){ %> _oninit:function(xform){<%-jslocals%><%-model.oninit%>}, <% }
    if('onload' in model){ %> _onload:function(xform, callback){<%-jslocals%><%-model.onload%>}, <% }
    if('onloadimmediate' in model){ %> _onloadimmediate:function(xform, callback){<%-jslocals%><%-model.onloadimmediate%>}, <% }
    if('oninsert' in model){ %> _oninsert:function(xform,urlkeys,url){<%-jslocals%><%-model.oninsert%>}, <% }
    if('onupdate' in model){ %> _onupdate:function(xform){<%-jslocals%><%-model.onupdate%>}, <% }
    if('oncommit' in model){ %> _oncommit:function(xform,rowid,callback){<%-jslocals%><%-model.oncommit%>}, <% }
    if('onvalidate' in model){ %> _onvalidate:function(xform, callback){<%-jslocals%><%-model.onvalidate%>}, <% }
    if('ondestroy' in model){ %> _ondestroy:function(xform){<%-jslocals%><%-model.ondestroy%>}, <% }
    if('onloadstate' in model){ %> _onloadstate:function(xform, state){<%-jslocals%><%-model.onloadstate%>}, <% }
    if('onrowbind' in model){ %> _onrowbind:function(xform, jobj, datarow){<%-jslocals%><%-model.onrowbind%>}, <% }

    if(model.unbound){ %> unbound:true, <% }
    //onloadstate
    %>
  };
  if(!('<%=model._basemodel%>' in jsh.XBase)) jsh.XBase['<%=model._basemodel%>'] = [];
  jsh.XBase['<%=model._basemodel%>'].push('<%=model.id%>');
  <% if('js' in model){ %>
    var modelid = '<%=model.id%>';
    if(!(modelid in jsh.App)) jsh.App[modelid] = {};
    <%-XExt.ReplaceAll(model.js,'<'+'%=model.id%'+'>',model.id)%>
  <% } %>
})(<%-instance%>);
</script>
<% if(('css' in model) && model.css && model.css.trim()){ %>
<style type="text/css">
<%-model.css%>
</style>
<% } %>
<script type="text/javascript">
<%-jsh.RenderView('jsh_'+xejs.case(
  model.layout=='form','form',
  model.layout=='form-m','form',
  model.layout=='multisel','multisel',
  model.layout=='exec','exec',
  model.layout=='grid','grid'
  )+'.js',ejsparams)%>
</script>