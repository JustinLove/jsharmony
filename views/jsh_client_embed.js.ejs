<script type="text/javascript">
/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
(function(jsh){
  var modelid = '<%=model.id%>';
  var basemodelid = '<%=model._basemodel%>';
  <% if(model.topmost){ %>
  jsh.XModels = {};
  jsh.XBase = {};
  jsh.XModels_root = modelid;
  jsh.XPopups = {};
  jsh.is_popup = <%=xejs.iif('popup' in model,'true','false')%>;
  <% } %>
  <%-jslocals%>
  <%
  var curtab = null;
  if(model.tabs && model.tabs.length){
    var tab = _.find(model.tabs,function(tab){ return tab.selected; });
    if(tab) curtab = tab.modelid;
  }
  var bindings = model.bindings;
  if(model.topmost && (typeof bindings == 'undefined')){
    if((model.layout=='form-m')||(model.layout=='multisel')){
      _.each(model.fields, function(field){
        if(field.name && XExt.access(field.actions,'F') && (field.name in jsh._GET) && jsh._GET[field.name]){
          if(!bindings) bindings = {};
          bindings[field.name] = "'" + XExt.escapeJS(jsh._GET[field.name]) + "'";
        }
      });
    }
  }
  %>
  var xmodel = jsh.XModels[modelid] = {
    id:modelid,
    class:'<%=model.class%>',
    controller: null,
    datamodel: null,
    actions:'<%=model.actions%>',
    layout:'<%=model.layout%>',
    title: <%-xejs.iif(model.title,JSON.stringify(model.title),"''")%>,
    caption:<%-JSON.stringify(model.caption)%>,
    parent:<%-((typeof parent == 'undefined')?'null':"'"+parent.id+"'")%>,
    bindings:<% if(!bindings){ %>null<% } else { 
      %>{<%
      if(model.topmost) _.each(model.fields,function(field){ if(field.name in bindings) {%><%=field['name']%>: function(){return jsh.XExt.LiteralOrLookup(<%-JSON.stringify(field['name'])%>,jsh._GET);},<%	}});
      else if(typeof bindings != 'undefined') _.each(bindings,function(val,key){%><%=key%>: function(){ var xparentmodel = jsh.XModels['<%=parent.id%>']; return jsh.XExt.LiteralOrLookup(<%-JSON.stringify(val)%>,xparentmodel.controller.form.Data,xparentmodel);},<%}); 
      %>}<%
    } %>,
    constant_bindings:<%-JSON.stringify(_.keys(_.pickBy(bindings, function(value, key){ if(typeof jsh.XExt.LiteralOrLookup(value) != 'undefined') return true; return false; })))%>,
    keys:[<% xejs.eachKey(model.fields,function(field){%>'<%=field.name%>',<%});%>],
    commitlevel:'<%=(model.commitlevel?model.commitlevel:'')%>',
    curtab:<%-(curtab?JSON.stringify(curtab):'null')%>,
    <% 
    if('oninit' in model){ %> oninit:function(xmodel){<%-jslocals%><%-model.oninit%>}, <% }
    if('onload' in model){ %> onload:function(xmodel, callback){<%-jslocals%><%-model.onload%>}, <% }
    if('onloadimmediate' in model){ %> onloadimmediate:function(xmodel, callback){<%-jslocals%><%-model.onloadimmediate%>}, <% }
    if('oninsert' in model){ %> oninsert:function(xmodel,urlkeys,url){<%-jslocals%><%-model.oninsert%>}, <% }
    if('onupdate' in model){ %> onupdate:function(xmodel){<%-jslocals%><%-model.onupdate%>}, <% }
    if('oncommit' in model){ %> oncommit:function(xmodel,rowid,callback){<%-jslocals%><%-model.oncommit%>}, <% }
    if('onvalidate' in model){ %> onvalidate:function(xmodel, callback){<%-jslocals%><%-model.onvalidate%>}, <% }
    if('ondestroy' in model){ %> ondestroy:function(xmodel){<%-jslocals%><%-model.ondestroy%>}, <% }
    if('onloadstate' in model){ %> onloadstate:function(xmodel, state){<%-jslocals%><%-model.onloadstate%>}, <% }
    if('onrowbind' in model){ %> onrowbind:function(xmodel, jobj, datarow){<%-jslocals%><%-model.onrowbind%>}, <% }

    if(model.unbound){ %> unbound:true, <% } %>
  };
  xmodel.getBindingOrRootKey = function(bindingname){
    if(xmodel.bindings && (bindingname in xmodel.bindings)) return xmodel.bindings[bindingname]();
    if(xmodel.id==jsh.XModels_root){
      if(xmodel.hasBindingOrRootKey(bindingname)) return jsh._GET[bindingname];
    }
    return undefined;
  }
  xmodel.hasBindingOrRootKey = function(bindingname){
    if(xmodel.bindings && (bindingname in xmodel.bindings)) return true;
    if(xmodel.id==jsh.XModels_root){
      if(xmodel.datamodel){
        for(var fieldname in xmodel.datamodel.prototype.Fields){
          if(fieldname != bindingname) continue;
          var field = xmodel.datamodel.prototype.Fields[fieldname];
          if((field.key || field.lovkey) && (field.name in jsh._GET)) return true;
        }
      }
    }
    return false;
  }
  xmodel.get = function(fieldname){
    if(xmodel.hasBindingOrRootKey(fieldname)) return xmodel.getBindingOrRootKey(fieldname);
    else if(xmodel.controller && xmodel.controller.form) return XExt.getFormField(xmodel.controller.form, fieldname);
    else XExt.Alert('Could not set value - model.controller.form not initialized');
  }
  xmodel.set = function(fieldname,value){
    if(xmodel.controller && xmodel.controller.form) XExt.setFormControl(xmodel.controller.form, fieldname, value);
    else XExt.Alert('Could not set value - model.controller.form not initialized');
  }
  if(!(basemodelid in jsh.XBase)) jsh.XBase[basemodelid] = [];
  jsh.XBase[basemodelid].push(modelid);
  <% if('js' in model){ %>
    if(!(modelid in jsh.App)) jsh.App[modelid] = {};
    <%-XExt.ReplaceAll(model.js,'<'+'%=model.id%'+'>',model.id)%>
  <% } %>
})(<%-instance%>);
</script>
<% if(('css' in model) && model.css && model.css.trim()){ %>
<style type="text/css">
<%-model.css%>
</style>
<% } %>
<script type="text/javascript">
<%-jsh.RenderView('jsh_'+xejs.case(
  model.layout=='form','form',
  model.layout=='form-m','form',
  model.layout=='multisel','multisel',
  model.layout=='exec','exec',
  model.layout=='grid','grid'
  )+'.js',ejsparams)%>
</script>