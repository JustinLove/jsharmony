/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

<%
var no_B = true;
_.each(model.fields,function(field){ if(XExt.access(field.actions,'B') && (field.control != 'html') && (field.name) && (field.control != 'subform') && (field.control != 'button')) no_B = false; });
%>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xform = null;

  xcontroller.Init = function(callback){
    xform = xcontroller.form = new jsh.XForm(modelid,'','');
    xform.Data = new xmodel.datamodel();

    <% xejs.eachKey(model.fields,function(field){  if(!field.name) return; %>xform.Data['<%=field['name']%>'] = xmodel.getBindingOrRootKey('<%=field['name']%>');<%}); %>
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_add){
        //Browse / Edit Record
        for(var fieldname in xmodel.bindings){
          xform.Data[fieldname] = xmodel.bindings[fieldname]();
        }
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>rslt['<%=field['name']%>'] = this.Data['<%=field['name']%>'];<%}); %>
      }
      else {
        //Add Record
        //Add parameters for breadcrumbs
        <% _.each(model.fields,function(field){ if(!field.name) return; if(XExt.access(field.actions,'C')) { %>rslt.<%=field['name']%> = jsh.XExt.LiteralOrLookup('<%=field['name']%>',[jsh._GET,this.Data]);<% } }); %>
        <% _.each(model.fields,function(field){ if(!field.name) return; if(field.lovkey){ %>rslt.<%=field['name']%> = jsh.XExt.LiteralOrLookup('<%=field['name']%>',[jsh._GET,this.Data]);<% } }); %>
      }
      return rslt; 
    };
    <%-xejs.iif(no_B,'xform.Select = function(onComplete){ if(onComplete) onComplete(); }; //No data to select')%>

    //Pull keys from parent
    //Get recordset

    jsh.$root('.xelem'+xmodel.class).keyup(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.dropdown').change(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });
    jsh.$root('.xelem'+xmodel.class+'.checkbox').change(function(){ if(!$(this).hasClass('editable')) return; xform.Data.OnControlUpdate(this); });

    <% _.each(model.fields,function(field){ if(!('control' in field) || !field.name) return; if((field.control=='date') && (XExt.access(field.actions,'IU'))) {%>
    jsh.$root(".<%=field.name%>.xelem"+xmodel.class).datepicker({ changeMonth: true, changeYear: true, dateFormat: ('<%=(field.controlparams?field.controlparams.dateformat:'')%>'||jsh.DEFAULT_DATEFORMAT), onSelect: function(){ if(jsh.is_add) return; xform.Data.OnControlUpdate(this); } });
    <% } }); %>  
    callback();
  }

  xcontroller.Save = function(){
    var data = xform.Data;
    if(!data.Commit()) return;

    var q;
    if(data._is_new) q = xform.PrepInsert;
    else q = xform.PrepUpdate;
    
    var dbtask = q.call(xform,function(rslt){
      if(data._is_new){
        //Pull keys
        data._is_new = false;
      }
    });
    return [dbtask];
  }
  
  xcontroller.Delete = function(callback){
    var is_new =  xform.Data._is_new;
    
    XExt.Confirm("Are you sure you want to delete this "+(is_new ? 'new ':'')+"<%=model.caption[1]%>?",function(){
      if(!is_new){
        xform.Delete.call(xform,function(rslt){
          callback();
        });
      }
      else callback();
    });
  }

})(<%-instance%>);