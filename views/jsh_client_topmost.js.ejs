/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

(function(){

  jsh.on('jsh_ready', function(){ jsh.XPage.onReady(); });

  window.onpopstate = function(event) {
    var state = event.state;
    jsh._GET = XExt.parseGET();

    var f = function () {
      if (!jsh.XPage.LoadState(state, {addBackHistoryOnCancel: true})) return;
      jsh.XPage.Select(function () { });
    };

    if (_.isObject(state)) {
      var drslt = jsh.XPage.OnExit();
      if (drslt) {
        XExt.Confirm(drslt + '\r\n\r\nAre you sure you want to leave this page?', function(){
          jsh.cancelExit = true;
          f();
        }, function () {
          jsh.XPage.AddHistory(jsh.state, true);
        });
        return;
      }
    }
    f();
  };

  jsh.XPage.OnExit = function() {
    if (!jsh.init_complete) return;

    var foundchanges = jsh.XPage.GetChanges();

    if (foundchanges.length > 0) {
      var msg = 'You have unsaved changes to ';
      for (var i = 0; i < foundchanges.length; i++) {
        msg += foundchanges[i];
        if (i < foundchanges.length - 2) msg += ', ';
        else if (i == foundchanges.length - 2) msg += ' and ';
      }
      msg += ' data.';
      return msg;
    }
  }

  jsh.XPage.GetChanges = function() {  //Returns array of form names that have changed
    var foundchanges = [];
    _.each(jsh.XModels, function (xmodel) {
      if (!xmodel.isEnabled()){ return; }
      if (!jsh.XExt.hasAction(xmodel.actions, 'IUD')) return;
      if (xmodel.controller.HasUpdates()) { foundchanges.push(xmodel.caption[1]); }
      else if (xmodel.controller.form && xmodel.controller.form.Data && xmodel.controller.form.Data._is_dirty) { foundchanges.push(xmodel.caption[1]); }
    });
    return foundchanges;
  }

  jsh.XPage.Save = function(options) {
    if (!options) options = {};
    if (!options.onFail) options.onFail = function () { };
    var dbtasks = [];
    var valid = true;
    jsh.XPage.traverseModels(null, function (xmodel) {
      if (!valid) return;
      if (XExt.hasAction(xmodel.actions, 'IU')) {
        var action = 'U';
        if (xmodel.layout == 'multisel') action = 'U';
        else if (xmodel.layout == 'grid') action = 'IU';
        else if (xmodel.controller.form.Data._is_insert) action = 'I';
        if (XExt.hasAction(xmodel.actions, action)) {
          var ftasks = xmodel.controller.Save();
          if (typeof ftasks == 'undefined') { valid = false; return; }
          dbtasks = _.union(dbtasks, ftasks);
        }
      }
    });
    if (!valid) return options.onFail('validation');
    jsh.XPage.traverseModelsAsync(jsh.XModels_root, function (xmodel, done) {
      if (!valid) return;
      if (typeof xmodel.onvalidate != 'undefined') xmodel.onvalidate(xmodel, function (rslt) { valid = (rslt === true); done(); });
      else done();
    }, function () {
      if (!valid) return options.onFail('form_validation');
      jsh.XPage.Save_Operation(dbtasks,options);
    }, { series: true });
  }

  jsh.XPage.Save_Operation = function(dbtasks, options) {
    if (!options) options = {};
    if (!options.onFail) options.onFail = function () { };
    //Handle async validation, if applicable
    var rootxmodel = jsh.XModels[jsh.XModels_root];
    rootxmodel.controller.form.ExecuteTrans(dbtasks, function (rslt) {
      if (options.onComplete && (options.onComplete(rslt) === false)) return;
      jsh.XPage.RefreshParent();
      if (jsh.is_insert) {
        var url = XExt.currentURL() + '?action=update';
        var urlkeys = {};
        //Scan results for key
        _.each(rootxmodel.keys, function (key) {
          //Find keys in results
          var foundkey = false;
          _.each(rslt, function (mrslt, modelid) {
            if (_.isObject(mrslt)) {
              if (key in mrslt) {
                var keyval = mrslt[key];
                if(!rootxmodel.bindings) rootxmodel.bindings = {};
                rootxmodel.bindings[key] = function () { return keyval; }
                rootxmodel.controller.form.Data[key] = keyval;
                urlkeys[key] = keyval;
                foundkey = true;
              }
            }
          });
          if (!foundkey) urlkeys[key] = rootxmodel.getBindingOrRootKey(key);
        });
        jsh.is_insert = false;
        if (!_.isEmpty(urlkeys)) url = url + '&' + $.param(urlkeys, false);
        window.onbeforeunload = null;
        jsh.cancelExit = true;
        //Execute oninsert Handler
        var bubble = true;
        jsh.XPage.traverseModels(null, function (xmodel) {
          if (!bubble) return;
          if (typeof xmodel.oninsert != 'undefined') if (xmodel.oninsert(xmodel, urlkeys, url) === false) bubble = false;
        });
        if (!bubble) return;

        XExt.navTo(url);
        return;
      }

      //Execute onupdate Handler
      var bubble = true;
      jsh.XPage.traverseModels(null, function (xmodel) {
        if (!bubble) return;
        if (typeof xmodel.onupdate != 'undefined') if (xmodel.onupdate(xmodel) === false) bubble = false;
      });
      if (!bubble) return;

      console.log('Save complete');
      jsh.XPage.Select(function () {
        console.log('Reselect complete');
      });
    }, options.onFail);
  }

  jsh.XPage.SaveNew = function(add_url) {
    jsh.XPage.Save({
      onComplete: function () {
        jsh.XPage.RefreshParent();
        window.onbeforeunload = null;
        jsh.cancelExit = true;
        window.location.href = add_url;
        return false;
      }
    });
  }

  jsh.XPage.Delete = function() {
    var xmodel = jsh.XModels[jsh.delete_target];
    xmodel.controller.Delete(function () {
      jsh.XPage.RefreshParent();
      window.onbeforeunload = null;
      jsh.cancelExit = true;
      if (jsh.is_popup) {
        if (window.opener) {
          window.close();
        }
        else {
          //window.open('', '_parent', '');  //Possibly needed for firefox
          window.close();
        }
      }
      else {
        var target = jsh._BASEURL;
        var bcrumbobj = jsh.$root('div.bcrumbs');
        if (bcrumbobj.size() > 0) {
          target = bcrumbobj.children('a').last().prop('href');
        }
        XExt.navTo(target);
      }
    });
  }

  jsh.XPage.onReady = function() {
    jsh.XPage.Hide(null,function(xmodel){ return xmodel.layout=='grid'; });
    if (!jsh.XModels[jsh.XModels_root].actions) { jsh.XExt.Alert('ERROR - No effective access to root form'); return; }

    //  jsh.XPage.traverseModels(null,function(xmodel){ console.log(xmodel.id); },function(){ jsh.$root('.xelemX').show(); });
    //  jsh.XPage.traverseModelsAsync(jsh.XModels_root,function(xmodel,done){ done(); },function(){ jsh.$root('.xelemX').show(); console.log('all done'); });
    var enable_save = false;
    var enable_delete = false;
    jsh.XPage.traverseModels(null, function (xmodel) {
      if ((xmodel.layout == 'form') || (xmodel.layout == 'multisel') || (xmodel.layout == 'form-m')) {
        if (jsh.XExt.hasAction(xmodel.actions, 'IU')) enable_save = true;
        if ((xmodel.id == jsh.XModels_root) || (xmodel.parent == jsh.XModels_root))
          if (!enable_delete && jsh.XExt.hasAction(xmodel.actions, 'D')) { enable_delete = true; jsh.delete_target = xmodel.id; }
      }
      else if ((xmodel.layout == 'grid') && (xmodel.commitlevel) && (xmodel.commitlevel != 'none')) {
        if (jsh.XExt.hasAction(xmodel.actions, 'IUD')) enable_save = true;
      }
    });

    jsh.XPage.traverseModelsAsync(jsh.XModels_root,
      function (xmodel, done) {
        xmodel.controller.Init(done);
      },
      function () {
        if ('state' in jsh._GET) jsh.XPage.LoadState(JSON.parse(jsh._GET.state));
        var button_groups = {};
        jsh.$root('.xform_button').each(function () {
          var jbtn = $(this);
          var btnactions = jbtn.data('actions');
          if (jsh.is_insert && !jsh.XExt.hasAction(btnactions, 'I')) jbtn.hide();
          else {
            if(jbtn.hasClass('grouped')){
              var modelid = jbtn.data('model');
              var buttonmodel = jsh.XModels[modelid];
              var group = jbtn.data('group');
              var button_group_name = modelid+'_'+group;
              if(!(button_group_name in button_groups)) button_groups[button_group_name] = {
                modelid: modelid,
                modelclass: buttonmodel.class,
                group: group,
                jbutton: []
              };
              button_groups[button_group_name].jbutton.push(jbtn);
            }
          }
        });
        for(var button_group_name in button_groups){
          var button_group = button_groups[button_group_name];
          jsh.$root('.xbody').append('<div class="xactions_group xcontext_menu xelem'+button_group.modelclass+'" data-group="'+button_group.group+'" style="display:none;"></div>');
          var jgroup = jsh.$root('.xactions_group.xelem'+button_group.modelclass+'[data-group="'+button_group.group+'"]');
          _.each(button_group.jbutton,function(jbutton){
            jgroup.append(jbutton);
          });
        }
        jsh.XPage.traverseModels(null, function (xmodel) {
          if (typeof xmodel.oninit != 'undefined') xmodel.oninit(xmodel);
        });
        jsh.XPage.Select(function () {
          jsh.InitControls();
          jsh.XPage.LayoutOneColumn();
          jsh.XPage.Show();
          jsh.XWindowResize();
          if (enable_save) jsh.$root('.xactions.top .save').show();
          if (enable_delete) jsh.$root('.xactions.top .delete').show();
          jsh.XPage.traverseModels(null, function (xmodel) {
            if (!jsh.is_insert && jsh.XExt.hasAction(xmodel.actions, 'I')) jsh.$root('.xactions.xelem' + xmodel.class + ' .duplicate').show();
          });
          jsh.init_complete = true;
          //Update Browser History with URL/state
          if (jsh.XExt.isSinglePage()) {
            var new_url = jsh.state.fullpath + jsh.state.QS + jsh.state.hash;
            jsh.XExt.ReplaceHistory(new_url, jsh.XPage.GetState(new_url));
            if (jsh.state.hash) {
              jsh.XExt.jumpAnchor(jsh.state.hash);
            }
          }
          else jsh.XExt.ReplaceHistory(window.location.href.toString(), jsh.XPage.GetState());

          //Select first search value by default, if form is open
          jsh.$root('.xsearch_value:visible').first().select().focus();

          console.log('Initialization Complete');
        }, jsh.XModels_root);
      });
  }

  jsh.XPage.Refresh = function(modelid) {
    //Handle modelid
    if (jsh.XPage.onGridExit(null, function () { jsh.XPage.Refresh(modelid); })) return;
    //Modify grid refresh to load multiple pages
    var foundchanges = jsh.XPage.GetChanges();
    if (foundchanges.length > 0) return;

    jsh.XPage.Select(function () { jsh.XPage.RefreshParent(modelid); console.log('Reselect complete'); }, modelid);
  }

  jsh.XPage.RefreshParent = function(modelid) {
    var jshOpener = XExt.getOpenerJSH(['Refresh']);
    if (jshOpener) {
      jshOpener.XPage.Refresh(modelid);
    }
  }

  jsh.XPage.Reload = function(options) {
    options = _.extend({ force: false, browserRefresh: false }, options);
    var a = XExt.getURLObj(window.location.href);
    var qs = XExt.parseGET(a.search);
    qs.tstmp = Date.now();
    a.search = '?' + $.param(qs);
    if(options.force){
      window.onbeforeunload = null;
      jsh.cancelExit = true;
    }
    if(options.browserRefresh){
      window.location = a.href.toString();
    }
    else {
      XExt.navTo(a.href.toString());
    }
  }

  jsh.XPage.PreDestroy = function() {
    //Call OnDestroy Handlers
    _.each(jsh.XModels, function (xmodel) {
      if (typeof xmodel.ondestroy != 'undefined') xmodel.ondestroy(xmodel);
    });
    //Clear CKEDITORs
    if ((typeof CKEDITOR != 'undefined') && (CKEDITOR.instances)) {
      for (var name in CKEDITOR.instances) {
        CKEDITOR.instances[name].destroy();
      }
    }
  }

  jsh.XPage.Destroy = function() {
    jsh.off('jsh_ready');
    for(var key in jsh.App){
      var elem = jsh.App[key];
      if (elem instanceof jsh.XGrid) elem.Destroy();
      delete jsh.App[key];
    }
    for (var i = 0; i < jsh.intervals.length; i++) {
      try { window.clearInterval(jsh.intervals[i]); } catch (e) { }
    }
    jsh.App = {};
    jsh.intervals = [];
    jsh.on('jsh_ready', function(){ jsh.XPage.onReady(); });
  }

  jsh.XPage.traverseModelDefinitions = function(model,modelParent,modelEach,onComplete,options){ //modelcb(model,modelParent)
    if(!options) options = { ignoreFields: false, ignoreTabs: false };
    if(!model) return;
    modelEach(model,modelParent);
    if(!options.ignoreTabs && model.curtabmodel) jsh.XPage.traverseModelDefinitions(model.curtabmodel,model,modelEach,undefined,options);
    if(!options.ignoreFields && model.fields) for(var i=0;i<model.fields.length;i++){
      if(model.fields[i].model) jsh.XPage.traverseModelDefinitions(model.fields[i].model,model,modelEach,undefined,options);
    }
    if(onComplete) onComplete();
  }

  //Calling XPage.Select with a null root model will check the model definition for updates
  jsh.XPage.Select = function(callback, root) {
    //Clear data from models that are disabled due to missing record
    jsh.XPage.traverseModels(root, function (xmodel) {
      if(xmodel.flags.no_form_record) xmodel.flags.no_form_record = false;
    }, undefined, { disabledModels: true });
    //If the Model itself is dynamic, reload the model definition before reloading the data
    if (typeof root == 'undefined'){
      var isDynamic = false;
      jsh.XPage.traverseModelDefinitions(jsh.cur_model, null, function (model, modelParent) {
        if(model.modeltype=='dynamic') isDynamic = true;
      });
      if(isDynamic) return jsh.Load({ addHistory: false, onRefreshNoChange: function(){ jsh.XPage.Select(callback, jsh.XModels_root); } });
      else root = jsh.XModels_root;
    }
    //Call Select on each model
    jsh.XPage.traverseModelsAsync(root,
      function (xmodel, done) {
        var onDone = function () {
          if (typeof xmodel.onloadimmediate != 'undefined') xmodel.onloadimmediate(xmodel);
          done();
        };
        if (jsh.is_insert){
          if(!jsh.XExt.hasAction(xmodel.actions, 'I')) { 
            if((xmodel.layout == 'form') || (xmodel.layout == 'form-m') || (xmodel.layout == 'grid')){
              if(!jsh.XExt.hasAction(xmodel.actions, 'B')) return done();
              //If model bindings are dependent on key
              if(xmodel.bindings && (_.keys(xmodel.bindings).length != xmodel.constant_bindings.length)){ jsh.XPage.DisableModelControls(xmodel); return done(); }
              //If this is a form with a missing key
              for(var key in xmodel.keys){
                if(xmodel.constant_bindings.indexOf(key)<0){ jsh.XPage.DisableModelControls(xmodel); return done(); }
              }
            }
          }
        }
        if(jsh.XModels[xmodel.id].unbound) return onDone();
        xmodel.controller.Select(function(){
          if((xmodel.layout=='form') && !jsh.is_insert && xmodel.controller.form && xmodel.controller.form.Data && xmodel.controller.form.Data._is_insert) xmodel.flags.no_form_record = true;
          return onDone();
        });
      },
      function () {
        //Update title and other dynamic elements with in-place EJS
        jsh.XPage.RenderEJS(function () {
          //Trigger the onload event for each model
          var bubble = true;
          jsh.XPage.traverseModels(null, function (xmodel) {
            if (!bubble) return;
            if (typeof xmodel.onload != 'undefined') if (xmodel.onload(xmodel, callback) === false) bubble = false;
          });
          if (bubble && callback) callback();
          if (jsh.XExt.isSinglePage()) jsh.ResetLinks();
        });
      });
  }

  jsh.XPage.UpdateWindowTitle = function(options){
    options = _.extend({ resolveEJS: true }, options);

    //If Title = blank, pull title from Tabs
    var xmodel = jsh.XModels[jsh.XModels_root];
    var window_title = '';
    //Apply child tab's title to window if the form's title is blank
    while(!window_title && xmodel){
      if(xmodel.title){
        window_title = xmodel.title||'';
        if(!options.resolveEJS && (window_title.indexOf('<#') >= 0)) return;
        if(window_title && (window_title.indexOf('<#') >= 0)){
          window_title = jsh.XPage.ParseEJS(window_title,xmodel.id);
        }
        window_title = XExt.StripTags(window_title).trim();
      }
      xmodel = jsh.XModels[xmodel.curtab];
    }
    if(!window_title) window_title = jsh.XModels_root;
    document.title = XExt.StripTags(jsh.title.replace('%%%PAGETITLE%%%',window_title));
  }

  jsh.XPage.UpdateTitle = function(options){
    jsh.XPage.UpdateWindowTitle(options);

    var root_title = jsh.XModels[jsh.XModels_root].title;
    if(root_title && (root_title.indexOf('<#') >= 0)){
      root_title = jsh.XPage.ParseEJS(root_title, jsh.XModels_root);
      jsh.$root('.xform_title').html(root_title);
    }
    else {
      jsh.$root('.xform_title').html(root_title);
    }
  }

  jsh.XPage.RenderEJS = function(onComplete) {
    //Get breadcrumbs
    var rootxmodel = jsh.XModels[jsh.XModels_root];
    if (rootxmodel.controller.HasBreadCrumbs()) jsh.bcrumbs = rootxmodel.controller.GetBreadCrumbs();

    //Check for new titles in returned data
    jsh.XPage.traverseModels(null, function(xmodel) {
      if(!xmodel.controller) return;
      if(!xmodel.controller.HasTitle()) return;
      var title = xmodel.controller.GetTitle();
      if(title===null) return;
      title = title||'';
      if(title != xmodel.title){
        xmodel.title = title;
      }
    });

    //Update title
    jsh.XPage.UpdateTitle();

    //Update Breadcrumbs
    if (jsh.orig_bcrumbs.indexOf('<#') >= 0) {
      jsh.$root('div.bcrumbs').html(jsh.XPage.ParseEJS(jsh.orig_bcrumbs, jsh.XModels_root));
    }

    jsh.XPage.traverseModels(null, function (xmodel) {
      jsh.$root(".xtitle.xelem" + xmodel.class).each(function () {
        //Update each form title
        var title_text = xmodel.title;
        if (title_text.indexOf('<#') >= 0) $(this).html(jsh.XPage.ParseEJS(title_text, xmodel.id));
        else $(this).html(title_text);
      });
      jsh.$root(".xform_button.xelem" + xmodel.class+', .xnorecords.xelem'+xmodel.class+' a').each(function () {
        var href = $(this).attr('href');
        //Store / retrieve original URL
        if ($(this).data('orighref')) href = $(this).data('orighref');
        else $(this).data('orighref', href);
        //Parse URL EJS
        if (href.indexOf('<#') >= 0) {
          /* Resolve EJS */
          $(this).attr('href', jsh.XPage.ParseEJS(href, xmodel.id, xmodel.parent));
        }
      });
    }, onComplete, { disabledModels: true });
  }

  jsh.XPage.RemoveEJSTags = function(jobj) {
    if (jobj.size() == 0) return '';
    var rslt = jsh.XPage.getObjEJS(jobj);
    if (rslt.indexOf('<#') >= 0) {
      //jobj.html(rslt.replace(/<#(.*?)#>/g,''));
      jobj.html('');
    }
    return rslt;
  }

  jsh.XPage.getObjEJS = function(jobj) {
    if (jobj.size() == 0) return '';
    var rslt = jobj.html();
    rslt = XExt.ReplaceAll(rslt, '&lt;#', '<#');
    rslt = XExt.ReplaceAll(rslt, '#&gt;', '#>');
    return rslt;
  }

  jsh.XPage.traverseModels = function(parentid, callback, oncomplete, options) {
    if(!options) options = { disabledModels: false, childrenOnly: false };
    _.each(jsh.XModels, function (xmodel, xmodelid) {
      if (!options.disabledModels && !xmodel.isEnabled()){ return; }
      if (xmodel.parent == parentid) {
        callback(xmodel);
        if(!options.childrenOnly) jsh.XPage.traverseModels(xmodel.id, callback, undefined, options);
      }
    });
    if (typeof oncomplete != 'undefined') oncomplete();
  }

  jsh.XPage.traverseModelsAsync = function(rootid, xmodelfunc, done, options) {
    if (!options) options = { };
    xmodelfunc(jsh.XModels[rootid], function () {
      jsh.XPage.traverseModelsAsyncWorker(rootid, xmodelfunc, done, options);
    });
  }

  jsh.XPage.traverseModelsAsyncWorker = function(parentid, xmodelfunc, done, options) {
    if(!options) options = { disabledModels: false, series: false };

    var childf = [];
    _.each(jsh.XModels, function (xmodel, xmodelid) {
      if (!options.disabledModels && !xmodel.isEnabled()){ return; }
      if (xmodel.parent == parentid) {
        childf.push(function (cb) {
          xmodelfunc(xmodel, function () { jsh.XPage.traverseModelsAsyncWorker(xmodel.id, xmodelfunc, cb, options); });
        });
      }
    });

    if (childf.length == 0) { return done(); }

    if (options.series) jsh.async.series(childf, done);
    else jsh.async.parallel(childf, done);
  }

  jsh.XPage.getBreadcrumbs = function(){
    var rslt = {};
    for(var modelid in jsh.XModels){
      var xmodel = jsh.XModels[modelid];
      if(xmodel.controller){
        var bcrumbs = xmodel.controller.GetBreadCrumbs();
        if(bcrumbs) rslt = _.extend(rslt, bcrumbs);
      }
    }
    var rootxmodel = jsh.XModels[jsh.XModels_root];
    if(rootxmodel.controller && rootxmodel.controller.HasBreadCrumbs()){
      rslt = _.extend(rslt, jsh.bcrumbs);
    }
    return rslt;
  }

  jsh.XPage.ParseEJS = function(_ejssrc, modelid, parentmodelid) {
    var ejssrc = _ejssrc;
    var data = {};
    if (!(modelid in jsh.XModels)) { XExt.Alert('Error: Model ' + modelid + ' not found.'); return; }
    var xmodel = jsh.XModels[modelid];
    var xparentmodel = null;
    _.merge(data, jsh.forcequery);
    if(parentmodelid){
      xparentmodel = jsh.XModels[parentmodelid];
      if(xparentmodel.controller && xparentmodel.controller.grid) _.merge(data, xparentmodel.controller.grid.Data);
      else if(xparentmodel.controller && xparentmodel.controller.form) _.merge(data, xparentmodel.controller.form.Data);
    }
    if(xmodel.controller && xmodel.controller.grid) _.merge(data, xmodel.controller.grid.Data);
    else if(xmodel.controller && xmodel.controller.form) _.merge(data, xmodel.controller.form.Data);
    
    if(parentmodelid){
      for(var fieldname in xparentmodel.bindings){
        data[fieldname] = xparentmodel.bindings[fieldname]();
      }
    }
    for(var fieldname in xmodel.bindings){
      data[fieldname] = xmodel.bindings[fieldname]();
    }
    ejssrc=jsh.XExt.ReplaceAll(ejssrc,'data[j]','data');
    ejssrc = ejssrc.replace(/<#/g, '<' + '%').replace(/#>/g, '%' + '>');
    console.log(ejssrc);

    var ejsrslt = jsh.ejs.render(ejssrc, {
      data: data,
      LiteralOrLookup: jsh.XExt.LiteralOrLookup,
      bcrumbs: jsh.XPage.getBreadcrumbs(),
      jsh: jsh,
      instance: jsh.getInstance(),
      _GET: jsh._GET,
      modelid: modelid,
      js: function(code){ return jsh.XExt.wrapJS(code,modelid); }
    });
    return ejsrslt;
  }

  jsh.XPage.LayoutOneColumn = function(){
    jsh.$root('.xform.onecolumn').each(function(){
      var jform = $(this);
      var max_width = 0;
      jform.find('.leading').each(function(){ 
        var jobj = $(this);
        if(jobj.closest('.xform')[0]!=jform[0]) return;
        var width = jobj.width(); 
        if(width > max_width) max_width = width;
      });
      jform.find('.leading').each(function(){ 
        var jobj = $(this);
        if(jobj.closest('.xform')[0]!=jform[0]) return;
        jobj.width(max_width);
        jobj.toggle((max_width>0));
      });
    });
  }
  
  jsh.XPage.Hide = function(modelid,cond) {
    _.each(jsh.XModels, function (xmodel, xmodelid) {
      if(modelid && (modelid!=xmodelid)) return;
      if(cond && !cond(xmodel)) return;
      if (xmodel.layout == 'grid') jsh.$root('.xtbl.xelem' + xmodel.class + ',.xbodyhead.xelem' + xmodel.class).hide();
      else {
        jsh.$root('.xform'+xmodel.class).hide(); 
        jsh.$root('.xtabcontrol'+xmodel.class).hide(); 
      }
    });
  }

  jsh.XPage.Show = function(modelid, cond) {
    _.each(jsh.XModels, function (xmodel, xmodelid) {
      if(modelid && (modelid!=xmodelid)) return;
      if(cond && !cond(xmodel)) return;
      if (xmodel.layout == 'grid') jsh.$root('.xtbl.xelem' + xmodel.class + ',.xbodyhead.xelem' + xmodel.class).show();
      else {
        jsh.$root('.xform' + xmodel.class).show();
        jsh.$root('.xtabcontrol' + xmodel.class).show();
      }
    });
  }

  jsh.XPage.GetState = function(url) {
    var rslt = {};
    _.each(jsh.XModels, function (xmodel) {
      if (!xmodel.isEnabled()) return;
      if (!XExt.hasAction(xmodel.actions, 'B')) return;
      if (xmodel.layout != 'grid') return;
      rslt[xmodel.id] = xmodel.controller.GetState();
    });
    if ((typeof url != 'undefined') && (url != '')) rslt['_url'] = url;
    return rslt;
  }

  jsh.XPage.AddHistory = function(new_jsh_state, use_cur_state, options) {
    options = _.extend({ replaceHistory: false }, options);
    //Add Full URL to history (PATH+GET+HASH)
    var url = '';
    var state = undefined;
    if ((typeof new_jsh_state != 'undefined') && new_jsh_state) {
      url = new_jsh_state.fullpath + new_jsh_state.QS + new_jsh_state.hash;//$.param(JSON.parse(JSON.stringify(new_jsh_state.GET)));
      jsh.cur_history_url = url;
      if (use_cur_state) state = jsh.XPage.GetState(jsh.cur_history_url);
    }
    else {
      url = window.location.href.toString().split(window.location.host)[1];
      url = url.split('?')[0];
      url = url.split('#')[0];
      var nget = JSON.parse(JSON.stringify(jsh._GET));

      state = jsh.XPage.GetState(jsh.cur_history_url);
      var nget_state = JSON.parse(JSON.stringify(state));
      if ('_url' in nget_state) delete nget_state._url;

      nget.state = JSON.stringify(nget_state);
      if (!_.isEmpty(nget)) url += '?' + $.param(nget);
    }
    if(options.replaceHistory) XExt.ReplaceHistory(url, state);
    else XExt.AddHistory(url, state);
  }

  jsh.XPage.LoadState = function(state, options) {
    if(!options) options = { addBackHistoryOnCancel: false };
    if (!_.isObject(state)) return;

    if ('_url' in state) {
      //Get Base URL (PATH+GET)
      //var base_url = a.pathname + a.search;

      if (state._url != jsh.cur_history_url) {
        jsh._GET.state = JSON.stringify(state);
        var a = jsh.XExt.getURLObj(state._url);
        var orig_a = jsh.XExt.getURLObj(jsh.cur_history_url);
        var orig_url = orig_a.pathname + orig_a.search;
        jsh.cur_history_url = state._url;
        jsh.Navigate(a, false, orig_url, function () {
          if (options.addBackHistoryOnCancel) {
            jsh.XPage.AddHistory(jsh.state, true);
          }
        });
        return false;
      }
    }
    _.each(jsh.XModels, function (xmodel) {
      var modelid = xmodel.id;
      if (!xmodel.isEnabled()) return;
      if (!jsh.XExt.hasAction(xmodel.actions, 'B')) return;
      if (xmodel.onloadstate) return xmodel.onloadstate(xmodel, state[modelid]);
      if (xmodel.layout != 'grid') return;
      if (modelid in state) {
        xmodel.controller.LoadState(state[modelid]);
      }
    });
    if ('state' in jsh._GET) delete jsh._GET.state;
    return true;
  }

  jsh.XPage.DownloadFile = function(modelid, field, title) {
    var xmodel = jsh.XModels[modelid];
    var jctrl_token = jsh.$root('.xelem' + xmodel.class + ' .' + field + '_token');
    var file_token = jctrl_token.val();
    var url = '';
    if (file_token) url = jsh._BASEURL + '_dl/_temp/' + file_token;
    else {
      var xmodel = jsh.XModels[modelid];
      var keys = xmodel.controller.form.GetKeys();
      if (xmodel.keys.length != 1) { throw new Error('File models require one key.'); }
      url = jsh._BASEURL + '_dl/' + modelid + '/' + keys[xmodel.keys[0]] + '/' + field;
    }
    jsh.getFileProxy().prop('src', url);
    //window.open(url,'_blank'); 
  }

  jsh.XPage.FilePreview = function(modelid, field, title) {
    var xmodel = jsh.XModels[modelid];
    var jctrl_token = jsh.$root('.xelem' + xmodel.class + ' .' + field + '_token');
    var file_token = jctrl_token.val();
    var url = '';
    if (file_token) url = jsh._BASEURL + '_dl/_temp/' + file_token + '?view=1';
    else {
      var xmodel = jsh.XModels[modelid];
      var keys = xmodel.controller.form.GetKeys();
      if (xmodel.keys.length != 1) { throw new Error('File models require one key.'); }
      url = jsh._BASEURL + '_dl/' + modelid + '/' + keys[xmodel.keys[0]] + '/' + field + '?view=1';
      url += '&_=' + (new Date().getTime());
    }
    //jsh.getFileProxy().prop('src', url);
    window.open(url,'_blank',"height=600, width=800"); 
  }

  jsh.XPage.FileDelete = function(modelid, field, title) {
    var xmodel = jsh.XModels[modelid];
    var jctrl_token = jsh.$root('.xelem' + xmodel.class + ' .' + field + '_token');
    var jctrl_dbexists = jsh.$root('.xelem' + xmodel.class + ' .' + field + '_dbexists');
    var jctrl_dbdelete = jsh.$root('.xelem' + xmodel.class + ' .' + field + '_dbdelete');
    var jctrl = jsh.$root('.' + field + '.xelem' + xmodel.class);
    if (jctrl_dbexists.val() == '1') jctrl_dbdelete.val('1');
    jctrl_token.val('');
    jctrl.addClass('nodocument');
  }

  jsh.XPage.FileUploadDialog = function(modelid, field, title) {
    var xmodel = jsh.XModels[modelid];
    //Get PrevToken, if Applicable
    jsh.xfileupload_ctrl = jsh.$root('.' + field + '.xelem' + xmodel.class);
    if (jsh.xfileupload_ctrl.size() != 1) return;
    $.colorbox({
      href: jsh.$root(".xfileuploader"), inline: true, closeButton: false, arrowKey: false, preloading: false, overlayClose: false, title: title, fixed: true,
      onOpen: function () {
        jsh.$root('.xfileuploader_prevtoken').val(jsh.xfileupload_ctrl.children('.xform_file_token').val());
        jsh.$root('.xfileuploader_form').attr('action', jsh._BASEURL + '_ul/');
        XExt.clearFileInput(jsh.$root('.xfileuploader_file')[0]);
      },
      onComplete: function () { /* Optionally set element focus */ }
    });
  }

  jsh.XPage.FileUploadSubmit = function() {
    //Validate file selected
    if (!jsh.$root(".xfileuploader_file").val()) { XExt.Alert('Please select a file and then click Upload.'); return; }
    jsh.xLoader.StartLoading(jsh.xfileuploadLoader)
    //Submit form
    jsh.$root('.xfileuploader_form').submit();
    //Associate file_token, prevtoken with single field
    //Submit that field to the server on update/insert
  }

  jsh.XPage.FileUploadComplete = function(rslt) {
    $.colorbox.close();
    if (!('FILE_TOKEN' in rslt)) return;
    jsh.xfileupload_ctrl.children('.xform_file_token').val(rslt.FILE_TOKEN);
    jsh.xfileupload_ctrl.children('.xform_file_dbdelete').val('0');
    jsh.xfileupload_ctrl.removeClass('nodocument');
    //Rerender Control
    var val = XExt.getFormField(XExt.getFormFromObject(jsh.xfileupload_ctrl), jsh.xfileupload_ctrl.data('id'));
    XExt.setFormControl(XExt.getFormFromObject(jsh.xfileupload_ctrl), jsh.xfileupload_ctrl.data('id'), val);
  }

  jsh.XPage.onJSProxyComplete = function(id, data) {
    var _this = this;
    jsh.xLoader.StopLoading(jsh.xfileuploadLoader);
    if ((typeof data) == 'object'){
      if ('_error' in data) {
        if (id in jsh.jsproxy_hooks) { jsh.jsproxy_hooks[id](data._error,null); }
        else if (jsh.DefaultErrorHandler(data._error.Number, data._error.Message)) { }
        else if ((data._error.Number == -9) || (data._error.Number == -5)) { XExt.Alert(data._error.Message); }
        else { XExt.Alert('Error #' + data._error.Number + ': ' + data._error.Message); }
        return;
      }
      else if ('_success' in data) {
        if (id == 'xfileuploader') jsh.XPage.FileUploadComplete(data);
        else if (id in jsh.jsproxy_hooks) { jsh.jsproxy_hooks[id](null,data); }
        else XExt.Alert(JSON.stringify(data));
        return;
      }
    }
    XExt.Alert(JSON.stringify(data));
  }

  jsh.XPage.RunReport = function() {
    var xmodel = jsh.XModels[jsh.XModels_root];
    if (!(xmodel.layout == 'report')) { XExt.Alert('Root model does not have a "report" layout'); return; }
    xmodel.controller.RunReport();
  }

  jsh.XPage.RunReportHTML = function() {
    var xmodel = jsh.XModels[jsh.XModels_root];
    if (!(xmodel.layout == 'report')) { XExt.Alert('Root model does not have a "report" layout'); return; }
    xmodel.controller.RunReport(undefined,{output:'html'});
  }

  jsh.XPage.TestQueue = function() {
    var xmodel = jsh.XModels[jsh.XModels_root];
    if (!(xmodel.layout == 'report')) { XExt.Alert('Root model does not have a "report" layout'); return; }
    xmodel.controller.TestQueue();
  }

  jsh.XPage.RunQueue = function() {
    var xmodel = jsh.XModels[jsh.XModels_root];
    if (!(xmodel.layout == 'report')) { XExt.Alert('Root model does not have a "report" layout'); return; }

    XExt.Confirm("Are you sure you want to start the Report Job?", function () {
      xmodel.controller.RunQueue();
    });
  }

  jsh.XPage.RunDBFunc = function() { /* (cb), (object, cb), (cb, options), or (object, cb, options) */
    var cb = arguments[0];
    var xmodel = jsh.XModels[jsh.XModels_root];
    var options = {};
    var thisobj = null;
    if(arguments.length==2){
      if(_.isFunction(arguments[1])){
        thisobj = arguments[0];
        cb = arguments[1];
      }
      else if(_.isFunction(arguments[0])){
        cb = arguments[0];
        options = arguments[1];
      }
    }
    else if(arguments.length==3){
      thisobj = arguments[0];
      cb = arguments[1];
      options = arguments[2];
    }
    if(thisobj) xmodel = jsh.XModels[XExt.getModelIdFromObject(thisobj)];
    
    if (!(xmodel.layout == 'exec') && !(xmodel.layout == 'report')) { XExt.Alert('Root model does not have an exec or report layout'); return; }
    xmodel.controller.RunDBFunc(cb, options);
  }

  jsh.XPage.DisableModelControls = function(xmodel){
    var isGrid = (xmodel.layout == 'grid');
    if(!xmodel.datamodel) return;
    _.each(xmodel.datamodel.prototype.Fields, function(field){
      var fieldselector = '.' + field.name + '.xelem' + xmodel.class;
      if (isGrid) fieldselector = '.' + field.name + '.xelem' + xmodel.class;
      var jctrl = jsh.root.find(fieldselector);
      if(jctrl.length) jsh.XPage.Disable(jctrl);
    });
  }

  jsh.XPage.Disable = function(jctrl,show_lookup) {
    jctrl.removeClass('editable');
    jctrl.addClass('uneditable');

    if (jctrl.hasClass('dropdown')) jctrl.prop('disabled', true);
    else if (jctrl.hasClass('checkbox')) jctrl.prop('disabled', true);
    else jctrl.prop('readonly', true);
    if (!show_lookup && jctrl.next().hasClass('xlookup')) jctrl.next().hide();
  }

  jsh.XPage.Enable = function(jctrl) {
    jctrl.removeClass('uneditable');
    jctrl.addClass('editable');

    if (jctrl.hasClass('dropdown')) jctrl.prop('disabled', false);
    else if (jctrl.hasClass('checkbox')) jctrl.prop('disabled', false);
    else jctrl.prop('readonly', false);
    if (jctrl.next().hasClass('xlookup')) jctrl.next().show();
  }

  jsh.XPage.Print = function() {
    window.print();
  }

  //Clear Popups on Reset
  jsh.XPage.PopupCreate = function(onComplete) {
    var popup_id = '';
    do {
      popup_id = 'P' + Math.floor(Math.random() * 100000);
    } while (popup_id in jsh.XPopups);
    jsh.XPopups[popup_id] = onComplete;
    return popup_id;
  }

  jsh.XPage.PopupComplete = function(id, rslt) {
    if (!(id in jsh.XPopups)) return;
    jsh.XPopups[id](rslt);
  }

  jsh.XPage.onGridExit = function(obj, f) {
    var has_changes = false;
    jsh.XPage.traverseModels(null, function (xmodel) {
      if (has_changes) return;
      if ((xmodel.layout == 'grid') && (xmodel.commitlevel) && (xmodel.commitlevel != 'none')) {
        if (xmodel.commitlevel == 'page') {
          if (xmodel.controller.form.IsDirty) {
            XExt.Alert('Please save changes before performing grid operations.');
            has_changes = true;
            return;
          }
        }
        if (xmodel.controller.editablegrid && xmodel.controller.editablegrid.CurrentCell) {
          jsh.qInputAction = new XExt.XInputAction(obj, f);
          has_changes = true;
          return;
        }
      }
    });
    return has_changes;
  }

  jsh.XPage.openDataURL = function(win, modelid, url, options) {
    var xmodel = jsh.XModels[modelid];
    if (!win) win = window.open('', '_blank', options);
    if ((xmodel.layout == 'form') || (xmodel.layout == 'form-m') || (xmodel.layout == 'exec') || (xmodel.layout == 'report')) {
      url = XExt.ReplaceAll(url, 'data[j]', 'data');
    }
    url = jsh.XPage.ParseEJS(url, modelid);
    win.location = url;
    win.focus();
  }

  jsh.XPage.Duplicate = function(modelid, link, link_options) {
    var win = null;
    var xmodel = jsh.XModels[modelid];
    xmodel.controller.RunDBFunc(function (rslt) {
      //On success
      if(link){
        jsh.XPage.openDataURL(win, modelid, link, link_options, rslt);
        win.opener = window.opener;
      }
      jsh.XPage.RefreshParent();
      $.colorbox.close();
      jsh.XPage.Refresh();
    }, {
      onBeforeUpdate: function () {
        if(link) win = window.open('', '_blank', link_options);
      },
      noMessage: true,
      onFail: function (err) { if(win) win.close(); }
    });
  }
  jsh.XPage.HasUpdates = function() {
    var rslt = false;
    _.each(jsh.XModels, function (xmodel) {
      if (!xmodel.isEnabled()) return;
      if (!XExt.hasAction(xmodel.actions, 'IUD')) return;
      if (xmodel.controller.HasUpdates()) { rslt = true; }
    });
    return rslt;
  }

  jsh.XPage.handleShortcutKeys = function(e) {
    var handled = false;
    if (jsh.XPage.CustomShortcutKeys && jsh.XPage.CustomShortcutKeys(e)) {
      handled = true;
    }
    else if ((e.which == 83) && (e.altKey)) {//ALT+S = SAVE
      jsh.$root('.save:visible').first().trigger('click');
      handled = true;
    }
    else if ((e.which == 78) && (e.altKey)) {//ALT+N = NEW
      XExt.findClosest(e.target, '.xbuttoninsert:visible').first().trigger('click');
      handled = true;
    }
    else if ((e.which == 70) && (e.altKey)) {//ALT+Q = Search
      jsh.$root('.xsearchbutton:visible').first().trigger('click');
      handled = true;
    }
    else if ((e.which == 80) && (e.altKey)) {//ALT+P = PRINT
      jsh.XPage.Print();
      handled = true;
    }
    else if ((e.which == 68) && (e.altKey) && (e.ctrlKey)) { //ALT+CTRL+D = ENABLE DEBUG CONSOLE
      jsh.xDebugConsole.Toggle();
      handled = true;
    }
    if (handled) {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
  }

  jsh.XPage.ShowButtonGroup = function(e,obj){
    var jobj = $(obj);
    var modelid = $(jobj).data('model');
    var group = $(jobj).data('group');
    var xmodel = jsh.XModels[modelid];
    var jgroup = jsh.$root('.xactions_group.xelem'+xmodel.class+'[data-group="'+group+'"]');
    
    jsh.$root('.xcontext_menu').hide();
    jgroup.css('visibility', 'hidden');
    jgroup.show();
    var xtop = jobj.offset().top + jobj.outerHeight(); var xleft = jobj.offset().left;
    var offset = jgroup.offsetParent().offset();
    xtop -= offset.top + 1;
    xleft -= offset.left;
    jgroup.css({ 'top': xtop, 'left': xleft });
    jgroup.css('visibility', 'visible');
    jsh.xContextMenuVisible = true;
    jsh.xContextMenuItem = modelid;
    XExt.CancelBubble(e);
  }

})();